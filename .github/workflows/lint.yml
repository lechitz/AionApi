# ---------------------------------------------------------------------
# Lint Workflow for AionAPI (Go)
# Purpose: Run golangci-lint (via reviewdog), fieldalignment, and go vet.
# Extras: Ensures Swagger artifacts are up-to-date before linting.
# Trigger: Every PR targeting 'main'.
# NOTE: Your .golangci.yml should set `issues.exclude-generated: true`
#       or exclude internal/platform/docs to avoid flags on generated code.
# ---------------------------------------------------------------------

name: Lint

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  lint:
    name: Golang Lint and Vet
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Setup Go from go.mod and use latest patch
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      # 3) Pre-download modules to stabilize builds
      - name: Download modules
        run: go mod download

      # 4) Ensure local caches exist
      - name: Ensure cache dirs exist
        run: |
          mkdir -p ~/.cache/go-build
          mkdir -p ~/.cache/golangci-lint

      # 5) Cache Go build artifacts
      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # 6) Cache golangci-lint cache
      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golangci-

      # 7) Swagger drift gate: generate and verify artifacts are committed
      - name: Generate Swagger docs
        run: make docs.gen

      - name: Check Swagger docs drift
        run: make docs.check-dirty

      # 8) Run golangci-lint via reviewdog (PR review annotations)
      - name: Run golangci-lint via reviewdog
        uses: reviewdog/action-golangci-lint@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          golangci_lint_version: v1.56.2
          golangci_lint_flags: --config=.golangci.yml ./...
          level: warning
          reporter: github-pr-review
          fail_level: error

      # 9) Install fieldalignment analyzer
      - name: Install fieldalignment
        run: go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest

      # 10) Run fieldalignment on config structs (advisory)
      - name: Run fieldalignment
        run: fieldalignment ./internal/platform/config

      # 11) Run native go vet across the repo
      - name: Run go vet
        run: go vet ./...
