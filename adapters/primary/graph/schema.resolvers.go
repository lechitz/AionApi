package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/lechitz/AionApi/adapters/primary/graph/model"
	"github.com/lechitz/AionApi/internal/core/domain"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, category model.DtoCreateCategory) (*model.Category, error) {
	userID, ok := ctx.Value("user_id").(uint64)
	if !ok {
		return nil, fmt.Errorf("userID not found in context")
	}

	createCategory := domain.Category{
		UserID:      userID,
		Name:        category.Name,
		Description: *category.Description,
		Color:       *category.ColorHex,
		Icon:        *category.Icon,
	}

	categoryDB, err := r.Resolver.CategoryService.CreateCategory(ctx, createCategory)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		CategoryID:  fmt.Sprintf("%d", categoryDB.ID),
		UserID:      fmt.Sprintf("%d", categoryDB.UserID),
		Name:        categoryDB.Name,
		Description: &categoryDB.Description,
		ColorHex:    &categoryDB.Color,
		Icon:        &categoryDB.Icon,
	}, nil
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.NewTag) (*model.Tags, error) {
	panic(fmt.Errorf("not implemented: CreateTag - createTag"))
}

// AllCategories is the resolver for the AllCategories field.
func (r *queryResolver) AllCategories(ctx context.Context, userID string) ([]*model.Category, error) {
	userIDUint, err := strconv.ParseUint(userID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID format")
	}

	categoryDB, err := r.Resolver.CategoryService.GetAllCategories(ctx, userIDUint)
	if err != nil {
		return nil, errors.New("failed to fetch categories")
	}

	categories := make([]*model.Category, len(categoryDB))
	for i, category := range categoryDB {
		categories[i] = &model.Category{
			CategoryID:  fmt.Sprintf("%d", category.ID),
			UserID:      fmt.Sprintf("%d", category.UserID),
			Name:        category.Name,
			Description: &category.Description,
			ColorHex:    &category.Color,
			Icon:        &category.Icon,
		}
	}

	return categories, nil
}

// GetCategoryByID is the resolver for the GetCategoryByID field.
func (r *queryResolver) GetCategoryByID(ctx context.Context, categoryRequest model.DtoGetCategoryByID) (*model.Category, error) {
	categoryIDUint, err := strconv.ParseUint(categoryRequest.CategoryID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID format")
	}

	userIDUint, err := strconv.ParseUint(categoryRequest.UserID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID format")
	}

	category := domain.Category{
		ID:     categoryIDUint,
		UserID: userIDUint,
	}

	categoryDB, err := r.Resolver.CategoryService.GetCategoryByID(ctx, category)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		CategoryID:  fmt.Sprintf("%d", categoryDB.ID),
		UserID:      fmt.Sprintf("%d", categoryDB.UserID),
		Name:        categoryDB.Name,
		Description: &categoryDB.Description,
		ColorHex:    &categoryDB.Color,
		Icon:        &categoryDB.Icon,
	}, nil
}

// GetCategoryByName is the resolver for the GetCategoryByName field.
func (r *queryResolver) GetCategoryByName(ctx context.Context, categoryRequest model.DtoGetCategoryByName) (*model.Category, error) {
	categoryIDUint, err := strconv.ParseUint(categoryRequest.UserID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid category ID format")
	}

	category := domain.Category{
		ID:     categoryIDUint,
		UserID: categoryIDUint,
		Name:   categoryRequest.Name,
	}

	categoryDB, err := r.Resolver.CategoryService.GetCategoryByID(ctx, category)
	if err != nil {
		return nil, err
	}

	return &model.Category{
		CategoryID:  fmt.Sprintf("%d", categoryDB.ID),
		UserID:      fmt.Sprintf("%d", categoryDB.UserID),
		Name:        categoryDB.Name,
		Description: &categoryDB.Description,
		ColorHex:    &categoryDB.Color,
		Icon:        &categoryDB.Icon,
	}, nil
}

// GetAllTags is the resolver for the GetAllTags field.
func (r *queryResolver) GetAllTags(ctx context.Context) ([]*model.Tags, error) {
	panic(fmt.Errorf("not implemented: GetAllTags - GetAllTags"))
}

// GetTagByID is the resolver for the GetTagByID field.
func (r *queryResolver) GetTagByID(ctx context.Context, tagID string) (*model.Tags, error) {
	panic(fmt.Errorf("not implemented: GetTagByID - GetTagByID"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
