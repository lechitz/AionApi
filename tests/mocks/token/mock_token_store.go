// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/output/cache/token_output.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/output/cache/token_output.go -destination=tests/mocks/token/mock_token_store.go -package=tokenmocks -mock_names=Store=MockTokenStore
//

// Package tokenmocks is a generated GoMock package.
package tokenmocks

import (
	context "context"
	reflect "reflect"

	"github.com/lechitz/AionApi/internal/core/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCreator is a mock of Creator interface.
type MockCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCreatorMockRecorder
	isgomock struct{}
}

// MockCreatorMockRecorder is the mock recorder for MockCreator.
type MockCreatorMockRecorder struct {
	mock *MockCreator
}

// NewMockCreator creates a new mock instance.
func NewMockCreator(ctrl *gomock.Controller) *MockCreator {
	mock := &MockCreator{ctrl: ctrl}
	mock.recorder = &MockCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreator) EXPECT() *MockCreatorMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockCreator) CreateToken(ctx context.Context, token entity.TokenDomain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockCreatorMockRecorder) CreateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockCreator)(nil).CreateToken), ctx, token)
}

// MockTokenChecker is a mock of TokenChecker interface.
type MockTokenChecker struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCheckerMockRecorder
	isgomock struct{}
}

// MockTokenCheckerMockRecorder is the mock recorder for MockTokenChecker.
type MockTokenCheckerMockRecorder struct {
	mock *MockTokenChecker
}

// NewMockTokenChecker creates a new mock instance.
func NewMockTokenChecker(ctrl *gomock.Controller) *MockTokenChecker {
	mock := &MockTokenChecker{ctrl: ctrl}
	mock.recorder = &MockTokenCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenChecker) EXPECT() *MockTokenCheckerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTokenChecker) Get(ctx context.Context, token entity.TokenDomain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenCheckerMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenChecker)(nil).Get), ctx, token)
}

// MockTokenSaver is a mock of TokenSaver interface.
type MockTokenSaver struct {
	ctrl     *gomock.Controller
	recorder *MockTokenSaverMockRecorder
	isgomock struct{}
}

// MockTokenSaverMockRecorder is the mock recorder for MockTokenSaver.
type MockTokenSaverMockRecorder struct {
	mock *MockTokenSaver
}

// NewMockTokenSaver creates a new mock instance.
func NewMockTokenSaver(ctrl *gomock.Controller) *MockTokenSaver {
	mock := &MockTokenSaver{ctrl: ctrl}
	mock.recorder = &MockTokenSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenSaver) EXPECT() *MockTokenSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockTokenSaver) Save(ctx context.Context, token entity.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTokenSaverMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTokenSaver)(nil).Save), ctx, token)
}

// MockTokenUpdater is a mock of TokenUpdater interface.
type MockTokenUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUpdaterMockRecorder
	isgomock struct{}
}

// MockTokenUpdaterMockRecorder is the mock recorder for MockTokenUpdater.
type MockTokenUpdaterMockRecorder struct {
	mock *MockTokenUpdater
}

// NewMockTokenUpdater creates a new mock instance.
func NewMockTokenUpdater(ctrl *gomock.Controller) *MockTokenUpdater {
	mock := &MockTokenUpdater{ctrl: ctrl}
	mock.recorder = &MockTokenUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUpdater) EXPECT() *MockTokenUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockTokenUpdater) Update(ctx context.Context, token entity.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTokenUpdaterMockRecorder) Update(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTokenUpdater)(nil).Update), ctx, token)
}

// MockTokenDeleter is a mock of TokenDeleter interface.
type MockTokenDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenDeleterMockRecorder
	isgomock struct{}
}

// MockTokenDeleterMockRecorder is the mock recorder for MockTokenDeleter.
type MockTokenDeleterMockRecorder struct {
	mock *MockTokenDeleter
}

// NewMockTokenDeleter creates a new mock instance.
func NewMockTokenDeleter(ctrl *gomock.Controller) *MockTokenDeleter {
	mock := &MockTokenDeleter{ctrl: ctrl}
	mock.recorder = &MockTokenDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenDeleter) EXPECT() *MockTokenDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenDeleter) Delete(ctx context.Context, token entity.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenDeleterMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenDeleter)(nil).Delete), ctx, token)
}

// MockTokenVerify is a mock of TokenVerify interface.
type MockTokenVerify struct {
	ctrl     *gomock.Controller
	recorder *MockTokenVerifyMockRecorder
	isgomock struct{}
}

// MockTokenVerifyMockRecorder is the mock recorder for MockTokenVerify.
type MockTokenVerifyMockRecorder struct {
	mock *MockTokenVerify
}

// NewMockTokenVerify creates a new mock instance.
func NewMockTokenVerify(ctrl *gomock.Controller) *MockTokenVerify {
	mock := &MockTokenVerify{ctrl: ctrl}
	mock.recorder = &MockTokenVerifyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenVerify) EXPECT() *MockTokenVerifyMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockTokenVerify) VerifyToken(ctx context.Context, token string) (uint64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, token)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockTokenVerifyMockRecorder) VerifyToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockTokenVerify)(nil).VerifyToken), ctx, token)
}

// MockTokenRepositoryPort is a mock of TokenRepositoryPort interface.
type MockTokenRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryPortMockRecorder
	isgomock struct{}
}

// MockTokenRepositoryPortMockRecorder is the mock recorder for MockTokenRepositoryPort.
type MockTokenRepositoryPortMockRecorder struct {
	mock *MockTokenRepositoryPort
}

// NewMockTokenRepositoryPort creates a new mock instance.
func NewMockTokenRepositoryPort(ctrl *gomock.Controller) *MockTokenRepositoryPort {
	mock := &MockTokenRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepositoryPort) EXPECT() *MockTokenRepositoryPortMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenRepositoryPort) Delete(ctx context.Context, token entity.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenRepositoryPortMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenRepositoryPort)(nil).Delete), ctx, token)
}

// Get mocks base method.
func (m *MockTokenRepositoryPort) Get(ctx context.Context, token entity.TokenDomain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenRepositoryPortMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenRepositoryPort)(nil).Get), ctx, token)
}

// Save mocks base method.
func (m *MockTokenRepositoryPort) Save(ctx context.Context, token entity.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTokenRepositoryPortMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTokenRepositoryPort)(nil).Save), ctx, token)
}

// Update mocks base method.
func (m *MockTokenRepositoryPort) Update(ctx context.Context, token entity.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTokenRepositoryPortMockRecorder) Update(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTokenRepositoryPort)(nil).Update), ctx, token)
}
