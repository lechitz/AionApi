// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/input/token_input.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/input/token_input.go -destination=tests/mocks/mock_token_usecase.go -package=mocks -mock_names=TokenService=MockTokenUsecase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenCreator is a mock of TokenCreator interface.
type MockTokenCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCreatorMockRecorder
	isgomock struct{}
}

// MockTokenCreatorMockRecorder is the mock recorder for MockTokenCreator.
type MockTokenCreatorMockRecorder struct {
	mock *MockTokenCreator
}

// NewMockTokenCreator creates a new mock instance.
func NewMockTokenCreator(ctrl *gomock.Controller) *MockTokenCreator {
	mock := &MockTokenCreator{ctrl: ctrl}
	mock.recorder = &MockTokenCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCreator) EXPECT() *MockTokenCreatorMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenCreator) CreateToken(ctx context.Context, token domain.TokenDomain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenCreatorMockRecorder) CreateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenCreator)(nil).CreateToken), ctx, token)
}

// MockTokenVerifier is a mock of TokenVerifier interface.
type MockTokenVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockTokenVerifierMockRecorder
	isgomock struct{}
}

// MockTokenVerifierMockRecorder is the mock recorder for MockTokenVerifier.
type MockTokenVerifierMockRecorder struct {
	mock *MockTokenVerifier
}

// NewMockTokenVerifier creates a new mock instance.
func NewMockTokenVerifier(ctrl *gomock.Controller) *MockTokenVerifier {
	mock := &MockTokenVerifier{ctrl: ctrl}
	mock.recorder = &MockTokenVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenVerifier) EXPECT() *MockTokenVerifierMockRecorder {
	return m.recorder
}

// GetToken mocks base method.
func (m *MockTokenVerifier) GetToken(ctx context.Context, token string) (uint64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, token)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenVerifierMockRecorder) GetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenVerifier)(nil).GetToken), ctx, token)
}

// MockTokenRemover is a mock of TokenRemover interface.
type MockTokenRemover struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRemoverMockRecorder
	isgomock struct{}
}

// MockTokenRemoverMockRecorder is the mock recorder for MockTokenRemover.
type MockTokenRemoverMockRecorder struct {
	mock *MockTokenRemover
}

// NewMockTokenRemover creates a new mock instance.
func NewMockTokenRemover(ctrl *gomock.Controller) *MockTokenRemover {
	mock := &MockTokenRemover{ctrl: ctrl}
	mock.recorder = &MockTokenRemoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRemover) EXPECT() *MockTokenRemoverMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenRemover) Delete(ctx context.Context, token domain.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenRemoverMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenRemover)(nil).Delete), ctx, token)
}

// MockTokenUsecase is a mock of TokenService interface.
type MockTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUsecaseMockRecorder
	isgomock struct{}
}

// MockTokenUsecaseMockRecorder is the mock recorder for MockTokenUsecase.
type MockTokenUsecaseMockRecorder struct {
	mock *MockTokenUsecase
}

// NewMockTokenUsecase creates a new mock instance.
func NewMockTokenUsecase(ctrl *gomock.Controller) *MockTokenUsecase {
	mock := &MockTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUsecase) EXPECT() *MockTokenUsecaseMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenUsecase) CreateToken(ctx context.Context, token domain.TokenDomain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenUsecaseMockRecorder) CreateToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenUsecase)(nil).CreateToken), ctx, token)
}

// Delete mocks base method.
func (m *MockTokenUsecase) Delete(ctx context.Context, token domain.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenUsecaseMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenUsecase)(nil).Delete), ctx, token)
}

// GetToken mocks base method.
func (m *MockTokenUsecase) GetToken(ctx context.Context, token string) (uint64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", ctx, token)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetToken indicates an expected call of GetToken.
func (mr *MockTokenUsecaseMockRecorder) GetToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockTokenUsecase)(nil).GetToken), ctx, token)
}
