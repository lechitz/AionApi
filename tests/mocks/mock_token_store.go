// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/output/token_output.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/output/token_output.go -destination=tests/mocks/mock_token_store.go -package=mocks -mock_names=Store=MockTokenStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenSaver is a mock of TokenSaver interface.
type MockTokenSaver struct {
	ctrl     *gomock.Controller
	recorder *MockTokenSaverMockRecorder
	isgomock struct{}
}

// MockTokenSaverMockRecorder is the mock recorder for MockTokenSaver.
type MockTokenSaverMockRecorder struct {
	mock *MockTokenSaver
}

// NewMockTokenSaver creates a new mock instance.
func NewMockTokenSaver(ctrl *gomock.Controller) *MockTokenSaver {
	mock := &MockTokenSaver{ctrl: ctrl}
	mock.recorder = &MockTokenSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenSaver) EXPECT() *MockTokenSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockTokenSaver) Save(ctx context.Context, token domain.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTokenSaverMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTokenSaver)(nil).Save), ctx, token)
}

// MockTokenChecker is a mock of TokenChecker interface.
type MockTokenChecker struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCheckerMockRecorder
	isgomock struct{}
}

// MockTokenCheckerMockRecorder is the mock recorder for MockTokenChecker.
type MockTokenCheckerMockRecorder struct {
	mock *MockTokenChecker
}

// NewMockTokenChecker creates a new mock instance.
func NewMockTokenChecker(ctrl *gomock.Controller) *MockTokenChecker {
	mock := &MockTokenChecker{ctrl: ctrl}
	mock.recorder = &MockTokenCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenChecker) EXPECT() *MockTokenCheckerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTokenChecker) Get(ctx context.Context, token domain.TokenDomain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenCheckerMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenChecker)(nil).Get), ctx, token)
}

// MockTokenDeleter is a mock of TokenDeleter interface.
type MockTokenDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenDeleterMockRecorder
	isgomock struct{}
}

// MockTokenDeleterMockRecorder is the mock recorder for MockTokenDeleter.
type MockTokenDeleterMockRecorder struct {
	mock *MockTokenDeleter
}

// NewMockTokenDeleter creates a new mock instance.
func NewMockTokenDeleter(ctrl *gomock.Controller) *MockTokenDeleter {
	mock := &MockTokenDeleter{ctrl: ctrl}
	mock.recorder = &MockTokenDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenDeleter) EXPECT() *MockTokenDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenDeleter) Delete(ctx context.Context, token domain.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenDeleterMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenDeleter)(nil).Delete), ctx, token)
}

// MockTokenClaimsExtractor is a mock of TokenClaimsExtractor interface.
type MockTokenClaimsExtractor struct {
	ctrl     *gomock.Controller
	recorder *MockTokenClaimsExtractorMockRecorder
	isgomock struct{}
}

// MockTokenClaimsExtractorMockRecorder is the mock recorder for MockTokenClaimsExtractor.
type MockTokenClaimsExtractorMockRecorder struct {
	mock *MockTokenClaimsExtractor
}

// NewMockTokenClaimsExtractor creates a new mock instance.
func NewMockTokenClaimsExtractor(ctrl *gomock.Controller) *MockTokenClaimsExtractor {
	mock := &MockTokenClaimsExtractor{ctrl: ctrl}
	mock.recorder = &MockTokenClaimsExtractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenClaimsExtractor) EXPECT() *MockTokenClaimsExtractorMockRecorder {
	return m.recorder
}

// ExtractFromContext mocks base method.
func (m *MockTokenClaimsExtractor) ExtractFromContext(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFromContext", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFromContext indicates an expected call of ExtractFromContext.
func (mr *MockTokenClaimsExtractorMockRecorder) ExtractFromContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFromContext", reflect.TypeOf((*MockTokenClaimsExtractor)(nil).ExtractFromContext), ctx)
}

// ExtractFromRequest mocks base method.
func (m *MockTokenClaimsExtractor) ExtractFromRequest(r *http.Request) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFromRequest", r)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFromRequest indicates an expected call of ExtractFromRequest.
func (mr *MockTokenClaimsExtractorMockRecorder) ExtractFromRequest(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFromRequest", reflect.TypeOf((*MockTokenClaimsExtractor)(nil).ExtractFromRequest), r)
}

// MockTokenStore is a mock of TokenStore interface.
type MockTokenStore struct {
	ctrl     *gomock.Controller
	recorder *MockTokenStoreMockRecorder
	isgomock struct{}
}

// MockTokenStoreMockRecorder is the mock recorder for MockTokenStore.
type MockTokenStoreMockRecorder struct {
	mock *MockTokenStore
}

// NewMockTokenStore creates a new mock instance.
func NewMockTokenStore(ctrl *gomock.Controller) *MockTokenStore {
	mock := &MockTokenStore{ctrl: ctrl}
	mock.recorder = &MockTokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenStore) EXPECT() *MockTokenStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTokenStore) Delete(ctx context.Context, token domain.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokenStoreMockRecorder) Delete(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokenStore)(nil).Delete), ctx, token)
}

// Get mocks base method.
func (m *MockTokenStore) Get(ctx context.Context, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokenStoreMockRecorder) Get(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokenStore)(nil).Get), ctx, token)
}

// Save mocks base method.
func (m *MockTokenStore) Save(ctx context.Context, token domain.TokenDomain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockTokenStoreMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTokenStore)(nil).Save), ctx, token)
}
