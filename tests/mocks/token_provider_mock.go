// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lechitz/AionApi/internal/core/ports/output (interfaces: TokenProvider)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/token_provider_mock.go -package=mocks -mock_names TokenProvider=TokenProvider github.com/lechitz/AionApi/internal/core/ports/output TokenProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// TokenProvider is a mock of TokenProvider interface.
type TokenProvider struct {
	ctrl     *gomock.Controller
	recorder *TokenProviderMockRecorder
	isgomock struct{}
}

// TokenProviderMockRecorder is the mock recorder for TokenProvider.
type TokenProviderMockRecorder struct {
	mock *TokenProvider
}

// NewTokenProvider creates a new mock instance.
func NewTokenProvider(ctrl *gomock.Controller) *TokenProvider {
	mock := &TokenProvider{ctrl: ctrl}
	mock.recorder = &TokenProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TokenProvider) EXPECT() *TokenProviderMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *TokenProvider) Generate(ctx context.Context, userID uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *TokenProviderMockRecorder) Generate(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*TokenProvider)(nil).Generate), ctx, userID)
}

// Verify mocks base method.
func (m *TokenProvider) Verify(ctx context.Context, tokenValue string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, tokenValue)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *TokenProviderMockRecorder) Verify(ctx, tokenValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*TokenProvider)(nil).Verify), ctx, tokenValue)
}
