// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lechitz/AionApi/internal/core/ports/output (interfaces: TokenStore)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/token_store_mock.go -package=mocks -mock_names TokenStore=TokenStore github.com/lechitz/AionApi/internal/core/ports/output TokenStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// TokenStore is a mock of TokenStore interface.
type TokenStore struct {
	ctrl     *gomock.Controller
	recorder *TokenStoreMockRecorder
	isgomock struct{}
}

// TokenStoreMockRecorder is the mock recorder for TokenStore.
type TokenStoreMockRecorder struct {
	mock *TokenStore
}

// NewTokenStore creates a new mock instance.
func NewTokenStore(ctrl *gomock.Controller) *TokenStore {
	mock := &TokenStore{ctrl: ctrl}
	mock.recorder = &TokenStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TokenStore) EXPECT() *TokenStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *TokenStore) Delete(ctx context.Context, tokenKey uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tokenKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *TokenStoreMockRecorder) Delete(ctx, tokenKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*TokenStore)(nil).Delete), ctx, tokenKey)
}

// Get mocks base method.
func (m *TokenStore) Get(ctx context.Context, tokenKey uint64) (domain.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tokenKey)
	ret0, _ := ret[0].(domain.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *TokenStoreMockRecorder) Get(ctx, tokenKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*TokenStore)(nil).Get), ctx, tokenKey)
}

// Save mocks base method.
func (m *TokenStore) Save(ctx context.Context, token domain.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *TokenStoreMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*TokenStore)(nil).Save), ctx, token)
}
