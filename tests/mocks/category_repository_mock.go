// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lechitz/AionApi/internal/core/ports/output (interfaces: CategoryRepository)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/category_repository_mock.go -package=mocks -mock_names CategoryRepository=CategoryRepository github.com/lechitz/AionApi/internal/core/ports/output CategoryRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// CategoryRepository is a mock of CategoryRepository interface.
type CategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *CategoryRepositoryMockRecorder
	isgomock struct{}
}

// CategoryRepositoryMockRecorder is the mock recorder for CategoryRepository.
type CategoryRepositoryMockRecorder struct {
	mock *CategoryRepository
}

// NewCategoryRepository creates a new mock instance.
func NewCategoryRepository(ctrl *gomock.Controller) *CategoryRepository {
	mock := &CategoryRepository{ctrl: ctrl}
	mock.recorder = &CategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *CategoryRepository) EXPECT() *CategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *CategoryRepository) Create(ctx context.Context, category domain.Category) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *CategoryRepositoryMockRecorder) Create(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*CategoryRepository)(nil).Create), ctx, category)
}

// GetByID mocks base method.
func (m *CategoryRepository) GetByID(ctx context.Context, categoryID uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, categoryID)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *CategoryRepositoryMockRecorder) GetByID(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*CategoryRepository)(nil).GetByID), ctx, categoryID)
}

// GetByName mocks base method.
func (m *CategoryRepository) GetByName(ctx context.Context, categoryName string) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, categoryName)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *CategoryRepositoryMockRecorder) GetByName(ctx, categoryName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*CategoryRepository)(nil).GetByName), ctx, categoryName)
}

// ListAll mocks base method.
func (m *CategoryRepository) ListAll(ctx context.Context, userID uint64) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, userID)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *CategoryRepositoryMockRecorder) ListAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*CategoryRepository)(nil).ListAll), ctx, userID)
}

// SoftDelete mocks base method.
func (m *CategoryRepository) SoftDelete(ctx context.Context, category domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *CategoryRepositoryMockRecorder) SoftDelete(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*CategoryRepository)(nil).SoftDelete), ctx, category)
}

// UpdateCategory mocks base method.
func (m *CategoryRepository) UpdateCategory(ctx context.Context, categoryID, userID uint64, fields map[string]any) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, categoryID, userID, fields)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *CategoryRepositoryMockRecorder) UpdateCategory(ctx, categoryID, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*CategoryRepository)(nil).UpdateCategory), ctx, categoryID, userID, fields)
}
