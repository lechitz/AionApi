// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/output/security/password.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPasswordManager is a mock of PasswordManager interface.
type MockPasswordManager struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordManagerMockRecorder
}

// MockPasswordManagerMockRecorder is the mock recorder for MockPasswordManager.
type MockPasswordManagerMockRecorder struct {
	mock *MockPasswordManager
}

// NewMockPasswordManager creates a new mock instance.
func NewMockPasswordManager(ctrl *gomock.Controller) *MockPasswordManager {
	mock := &MockPasswordManager{ctrl: ctrl}
	mock.recorder = &MockPasswordManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordManager) EXPECT() *MockPasswordManagerMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockPasswordManager) ComparePasswords(hashed, plain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashed, plain)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockPasswordManagerMockRecorder) ComparePasswords(hashed, plain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockPasswordManager)(nil).ComparePasswords), hashed, plain)
}

// HashPassword mocks base method.
func (m *MockPasswordManager) HashPassword(plain string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", plain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockPasswordManagerMockRecorder) HashPassword(plain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockPasswordManager)(nil).HashPassword), plain)
}
