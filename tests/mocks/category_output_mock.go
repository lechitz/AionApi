// Code generated by MockGen. DO NOT EDIT.
// Source: /home/lechitz/Projetos/AionApi/internal/category/core/ports/output/category_output.go
//
// Generated by this command:
//
//	mockgen -source=/home/lechitz/Projetos/AionApi/internal/category/core/ports/output/category_output.go -destination=/home/lechitz/Projetos/AionApi/tests/mocks/category_output_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/category/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryCreator is a mock of CategoryCreator interface.
type MockCategoryCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryCreatorMockRecorder
	isgomock struct{}
}

// MockCategoryCreatorMockRecorder is the mock recorder for MockCategoryCreator.
type MockCategoryCreatorMockRecorder struct {
	mock *MockCategoryCreator
}

// NewMockCategoryCreator creates a new mock instance.
func NewMockCategoryCreator(ctrl *gomock.Controller) *MockCategoryCreator {
	mock := &MockCategoryCreator{ctrl: ctrl}
	mock.recorder = &MockCategoryCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryCreator) EXPECT() *MockCategoryCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryCreator) Create(ctx context.Context, category domain.Category) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryCreatorMockRecorder) Create(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryCreator)(nil).Create), ctx, category)
}

// MockCategoryRetriever is a mock of CategoryRetriever interface.
type MockCategoryRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRetrieverMockRecorder
	isgomock struct{}
}

// MockCategoryRetrieverMockRecorder is the mock recorder for MockCategoryRetriever.
type MockCategoryRetrieverMockRecorder struct {
	mock *MockCategoryRetriever
}

// NewMockCategoryRetriever creates a new mock instance.
func NewMockCategoryRetriever(ctrl *gomock.Controller) *MockCategoryRetriever {
	mock := &MockCategoryRetriever{ctrl: ctrl}
	mock.recorder = &MockCategoryRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRetriever) EXPECT() *MockCategoryRetrieverMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCategoryRetriever) GetByID(ctx context.Context, categoryID, userID uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, categoryID, userID)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCategoryRetrieverMockRecorder) GetByID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCategoryRetriever)(nil).GetByID), ctx, categoryID, userID)
}

// GetByName mocks base method.
func (m *MockCategoryRetriever) GetByName(ctx context.Context, categoryName string, userID uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, categoryName, userID)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCategoryRetrieverMockRecorder) GetByName(ctx, categoryName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCategoryRetriever)(nil).GetByName), ctx, categoryName, userID)
}

// ListAll mocks base method.
func (m *MockCategoryRetriever) ListAll(ctx context.Context, userID uint64) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, userID)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockCategoryRetrieverMockRecorder) ListAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockCategoryRetriever)(nil).ListAll), ctx, userID)
}

// MockCategoryUpdater is a mock of CategoryUpdater interface.
type MockCategoryUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryUpdaterMockRecorder
	isgomock struct{}
}

// MockCategoryUpdaterMockRecorder is the mock recorder for MockCategoryUpdater.
type MockCategoryUpdaterMockRecorder struct {
	mock *MockCategoryUpdater
}

// NewMockCategoryUpdater creates a new mock instance.
func NewMockCategoryUpdater(ctrl *gomock.Controller) *MockCategoryUpdater {
	mock := &MockCategoryUpdater{ctrl: ctrl}
	mock.recorder = &MockCategoryUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryUpdater) EXPECT() *MockCategoryUpdaterMockRecorder {
	return m.recorder
}

// UpdateCategory mocks base method.
func (m *MockCategoryUpdater) UpdateCategory(ctx context.Context, categoryID, userID uint64, fields map[string]any) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, categoryID, userID, fields)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryUpdaterMockRecorder) UpdateCategory(ctx, categoryID, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryUpdater)(nil).UpdateCategory), ctx, categoryID, userID, fields)
}

// MockCategoryDeleter is a mock of CategoryDeleter interface.
type MockCategoryDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryDeleterMockRecorder
	isgomock struct{}
}

// MockCategoryDeleterMockRecorder is the mock recorder for MockCategoryDeleter.
type MockCategoryDeleterMockRecorder struct {
	mock *MockCategoryDeleter
}

// NewMockCategoryDeleter creates a new mock instance.
func NewMockCategoryDeleter(ctrl *gomock.Controller) *MockCategoryDeleter {
	mock := &MockCategoryDeleter{ctrl: ctrl}
	mock.recorder = &MockCategoryDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryDeleter) EXPECT() *MockCategoryDeleterMockRecorder {
	return m.recorder
}

// SoftDelete mocks base method.
func (m *MockCategoryDeleter) SoftDelete(ctx context.Context, categoryID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, categoryID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockCategoryDeleterMockRecorder) SoftDelete(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockCategoryDeleter)(nil).SoftDelete), ctx, categoryID, userID)
}

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryRepository) Create(ctx context.Context, category domain.Category) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, category)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryRepositoryMockRecorder) Create(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryRepository)(nil).Create), ctx, category)
}

// GetByID mocks base method.
func (m *MockCategoryRepository) GetByID(ctx context.Context, categoryID, userID uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, categoryID, userID)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCategoryRepositoryMockRecorder) GetByID(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCategoryRepository)(nil).GetByID), ctx, categoryID, userID)
}

// GetByName mocks base method.
func (m *MockCategoryRepository) GetByName(ctx context.Context, categoryName string, userID uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, categoryName, userID)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockCategoryRepositoryMockRecorder) GetByName(ctx, categoryName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockCategoryRepository)(nil).GetByName), ctx, categoryName, userID)
}

// ListAll mocks base method.
func (m *MockCategoryRepository) ListAll(ctx context.Context, userID uint64) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", ctx, userID)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockCategoryRepositoryMockRecorder) ListAll(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockCategoryRepository)(nil).ListAll), ctx, userID)
}

// SoftDelete mocks base method.
func (m *MockCategoryRepository) SoftDelete(ctx context.Context, categoryID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, categoryID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockCategoryRepositoryMockRecorder) SoftDelete(ctx, categoryID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockCategoryRepository)(nil).SoftDelete), ctx, categoryID, userID)
}

// UpdateCategory mocks base method.
func (m *MockCategoryRepository) UpdateCategory(ctx context.Context, categoryID, userID uint64, fields map[string]any) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, categoryID, userID, fields)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryRepositoryMockRecorder) UpdateCategory(ctx, categoryID, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateCategory), ctx, categoryID, userID, fields)
}
