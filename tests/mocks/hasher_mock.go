// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lechitz/AionApi/internal/core/ports/output (interfaces: Hasher)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/hasher_mock.go -package=mocks -mock_names Hasher=Hasher github.com/lechitz/AionApi/internal/core/ports/output Hasher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Hasher is a mock of Hasher interface.
type Hasher struct {
	ctrl     *gomock.Controller
	recorder *HasherMockRecorder
	isgomock struct{}
}

// HasherMockRecorder is the mock recorder for Hasher.
type HasherMockRecorder struct {
	mock *Hasher
}

// NewHasher creates a new mock instance.
func NewHasher(ctrl *gomock.Controller) *Hasher {
	mock := &Hasher{ctrl: ctrl}
	mock.recorder = &HasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Hasher) EXPECT() *HasherMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *Hasher) Compare(hashed, plain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashed, plain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *HasherMockRecorder) Compare(hashed, plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*Hasher)(nil).Compare), hashed, plain)
}

// Hash mocks base method.
func (m *Hasher) Hash(plain string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", plain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *HasherMockRecorder) Hash(plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*Hasher)(nil).Hash), plain)
}
