// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lechitz/AionApi/internal/core/ports/output (interfaces: ContextLogger)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/logger_mock.go -package=mocks -mock_names ContextLogger=ContextLogger github.com/lechitz/AionApi/internal/core/ports/output ContextLogger
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// ContextLogger is a mock of ContextLogger interface.
type ContextLogger struct {
	ctrl     *gomock.Controller
	recorder *ContextLoggerMockRecorder
	isgomock struct{}
}

// ContextLoggerMockRecorder is the mock recorder for ContextLogger.
type ContextLoggerMockRecorder struct {
	mock *ContextLogger
}

// NewContextLogger creates a new mock instance.
func NewContextLogger(ctrl *gomock.Controller) *ContextLogger {
	mock := &ContextLogger{ctrl: ctrl}
	mock.recorder = &ContextLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ContextLogger) EXPECT() *ContextLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *ContextLogger) Debugf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *ContextLoggerMockRecorder) Debugf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*ContextLogger)(nil).Debugf), varargs...)
}

// Debugw mocks base method.
func (m *ContextLogger) Debugw(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugw", varargs...)
}

// Debugw indicates an expected call of Debugw.
func (mr *ContextLoggerMockRecorder) Debugw(msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugw", reflect.TypeOf((*ContextLogger)(nil).Debugw), varargs...)
}

// DebugwCtx mocks base method.
func (m *ContextLogger) DebugwCtx(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugwCtx", varargs...)
}

// DebugwCtx indicates an expected call of DebugwCtx.
func (mr *ContextLoggerMockRecorder) DebugwCtx(ctx, msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugwCtx", reflect.TypeOf((*ContextLogger)(nil).DebugwCtx), varargs...)
}

// Errorf mocks base method.
func (m *ContextLogger) Errorf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *ContextLoggerMockRecorder) Errorf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*ContextLogger)(nil).Errorf), varargs...)
}

// Errorw mocks base method.
func (m *ContextLogger) Errorw(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorw", varargs...)
}

// Errorw indicates an expected call of Errorw.
func (mr *ContextLoggerMockRecorder) Errorw(msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorw", reflect.TypeOf((*ContextLogger)(nil).Errorw), varargs...)
}

// ErrorwCtx mocks base method.
func (m *ContextLogger) ErrorwCtx(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorwCtx", varargs...)
}

// ErrorwCtx indicates an expected call of ErrorwCtx.
func (mr *ContextLoggerMockRecorder) ErrorwCtx(ctx, msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorwCtx", reflect.TypeOf((*ContextLogger)(nil).ErrorwCtx), varargs...)
}

// Infof mocks base method.
func (m *ContextLogger) Infof(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *ContextLoggerMockRecorder) Infof(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*ContextLogger)(nil).Infof), varargs...)
}

// Infow mocks base method.
func (m *ContextLogger) Infow(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infow", varargs...)
}

// Infow indicates an expected call of Infow.
func (mr *ContextLoggerMockRecorder) Infow(msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infow", reflect.TypeOf((*ContextLogger)(nil).Infow), varargs...)
}

// InfowCtx mocks base method.
func (m *ContextLogger) InfowCtx(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfowCtx", varargs...)
}

// InfowCtx indicates an expected call of InfowCtx.
func (mr *ContextLoggerMockRecorder) InfowCtx(ctx, msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfowCtx", reflect.TypeOf((*ContextLogger)(nil).InfowCtx), varargs...)
}

// Warnf mocks base method.
func (m *ContextLogger) Warnf(format string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *ContextLoggerMockRecorder) Warnf(format any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*ContextLogger)(nil).Warnf), varargs...)
}

// Warnw mocks base method.
func (m *ContextLogger) Warnw(msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnw", varargs...)
}

// Warnw indicates an expected call of Warnw.
func (mr *ContextLoggerMockRecorder) Warnw(msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnw", reflect.TypeOf((*ContextLogger)(nil).Warnw), varargs...)
}

// WarnwCtx mocks base method.
func (m *ContextLogger) WarnwCtx(ctx context.Context, msg string, keysAndValues ...any) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range keysAndValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnwCtx", varargs...)
}

// WarnwCtx indicates an expected call of WarnwCtx.
func (mr *ContextLoggerMockRecorder) WarnwCtx(ctx, msg any, keysAndValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, keysAndValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnwCtx", reflect.TypeOf((*ContextLogger)(nil).WarnwCtx), varargs...)
}
