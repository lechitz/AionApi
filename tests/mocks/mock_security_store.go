// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/output/hasher_output.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/output/hasher_output.go -destination=tests/mocks/mock_security_store.go -package=mocks -mock_names=Store=MockSecurityStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHasherStore is a mock of HasherStore interface.
type MockHasherStore struct {
	ctrl     *gomock.Controller
	recorder *MockHasherStoreMockRecorder
	isgomock struct{}
}

// MockHasherStoreMockRecorder is the mock recorder for MockHasherStore.
type MockHasherStoreMockRecorder struct {
	mock *MockHasherStore
}

// NewMockHasherStore creates a new mock instance.
func NewMockHasherStore(ctrl *gomock.Controller) *MockHasherStore {
	mock := &MockHasherStore{ctrl: ctrl}
	mock.recorder = &MockHasherStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHasherStore) EXPECT() *MockHasherStoreMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockHasherStore) HashPassword(plain string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", plain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHasherStoreMockRecorder) HashPassword(plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHasherStore)(nil).HashPassword), plain)
}

// ValidatePassword mocks base method.
func (m *MockHasherStore) ValidatePassword(hashed, plain string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePassword", hashed, plain)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePassword indicates an expected call of ValidatePassword.
func (mr *MockHasherStoreMockRecorder) ValidatePassword(hashed, plain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePassword", reflect.TypeOf((*MockHasherStore)(nil).ValidatePassword), hashed, plain)
}
