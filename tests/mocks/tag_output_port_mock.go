// Code generated by MockGen. DO NOT EDIT.
// Source: /home/lechitz/Projetos/AionApi/internal/tag/core/ports/output/tag_output_port.go
//
// Generated by this command:
//
//	mockgen -source=/home/lechitz/Projetos/AionApi/internal/tag/core/ports/output/tag_output_port.go -destination=/home/lechitz/Projetos/AionApi/tests/mocks/tag_output_port_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/tag/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTagCreator is a mock of TagCreator interface.
type MockTagCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTagCreatorMockRecorder
	isgomock struct{}
}

// MockTagCreatorMockRecorder is the mock recorder for MockTagCreator.
type MockTagCreatorMockRecorder struct {
	mock *MockTagCreator
}

// NewMockTagCreator creates a new mock instance.
func NewMockTagCreator(ctrl *gomock.Controller) *MockTagCreator {
	mock := &MockTagCreator{ctrl: ctrl}
	mock.recorder = &MockTagCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagCreator) EXPECT() *MockTagCreatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTagCreator) Create(ctx context.Context, tag domain.Tag) (domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tag)
	ret0, _ := ret[0].(domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTagCreatorMockRecorder) Create(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagCreator)(nil).Create), ctx, tag)
}

// MockTagRetriever is a mock of TagRetriever interface.
type MockTagRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockTagRetrieverMockRecorder
	isgomock struct{}
}

// MockTagRetrieverMockRecorder is the mock recorder for MockTagRetriever.
type MockTagRetrieverMockRecorder struct {
	mock *MockTagRetriever
}

// NewMockTagRetriever creates a new mock instance.
func NewMockTagRetriever(ctrl *gomock.Controller) *MockTagRetriever {
	mock := &MockTagRetriever{ctrl: ctrl}
	mock.recorder = &MockTagRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRetriever) EXPECT() *MockTagRetrieverMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockTagRetriever) GetByID(ctx context.Context, tagID, userID uint64) (domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, tagID, userID)
	ret0, _ := ret[0].(domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagRetrieverMockRecorder) GetByID(ctx, tagID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagRetriever)(nil).GetByID), ctx, tagID, userID)
}

// GetByName mocks base method.
func (m *MockTagRetriever) GetByName(ctx context.Context, TagName string, userID uint64) (domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, TagName, userID)
	ret0, _ := ret[0].(domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTagRetrieverMockRecorder) GetByName(ctx, TagName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTagRetriever)(nil).GetByName), ctx, TagName, userID)
}

// MockTagRepository is a mock of TagRepository interface.
type MockTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagRepositoryMockRecorder
	isgomock struct{}
}

// MockTagRepositoryMockRecorder is the mock recorder for MockTagRepository.
type MockTagRepositoryMockRecorder struct {
	mock *MockTagRepository
}

// NewMockTagRepository creates a new mock instance.
func NewMockTagRepository(ctrl *gomock.Controller) *MockTagRepository {
	mock := &MockTagRepository{ctrl: ctrl}
	mock.recorder = &MockTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRepository) EXPECT() *MockTagRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTagRepository) Create(ctx context.Context, tag domain.Tag) (domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tag)
	ret0, _ := ret[0].(domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTagRepositoryMockRecorder) Create(ctx, tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagRepository)(nil).Create), ctx, tag)
}

// GetByID mocks base method.
func (m *MockTagRepository) GetByID(ctx context.Context, tagID, userID uint64) (domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, tagID, userID)
	ret0, _ := ret[0].(domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagRepositoryMockRecorder) GetByID(ctx, tagID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagRepository)(nil).GetByID), ctx, tagID, userID)
}

// GetByName mocks base method.
func (m *MockTagRepository) GetByName(ctx context.Context, TagName string, userID uint64) (domain.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, TagName, userID)
	ret0, _ := ret[0].(domain.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTagRepositoryMockRecorder) GetByName(ctx, TagName, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTagRepository)(nil).GetByName), ctx, TagName, userID)
}
