// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/output/db/category.go

// Package categorymocks is a generated GoMock package.
package categorymocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/lechitz/AionApi/internal/core/domain"
)

// MockCategoryCreator is a mock of CategoryCreator interface.
type MockCategoryCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryCreatorMockRecorder
}

// MockCategoryCreatorMockRecorder is the mock recorder for MockCategoryCreator.
type MockCategoryCreatorMockRecorder struct {
	mock *MockCategoryCreator
}

// NewMockCategoryCreator creates a new mock instance.
func NewMockCategoryCreator(ctrl *gomock.Controller) *MockCategoryCreator {
	mock := &MockCategoryCreator{ctrl: ctrl}
	mock.recorder = &MockCategoryCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryCreator) EXPECT() *MockCategoryCreatorMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryCreator) CreateCategory(ctx context.Context, category domain.Category) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryCreatorMockRecorder) CreateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryCreator)(nil).CreateCategory), ctx, category)
}

// MockCategoryRetriver is a mock of CategoryRetriver interface.
type MockCategoryRetriver struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRetriverMockRecorder
}

// MockCategoryRetriverMockRecorder is the mock recorder for MockCategoryRetriver.
type MockCategoryRetriverMockRecorder struct {
	mock *MockCategoryRetriver
}

// NewMockCategoryRetriver creates a new mock instance.
func NewMockCategoryRetriver(ctrl *gomock.Controller) *MockCategoryRetriver {
	mock := &MockCategoryRetriver{ctrl: ctrl}
	mock.recorder = &MockCategoryRetriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRetriver) EXPECT() *MockCategoryRetriverMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method.
func (m *MockCategoryRetriver) GetAllCategories(ctx context.Context) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoryRetriverMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryRetriver)(nil).GetAllCategories), ctx)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryRetriver) GetCategoryByID(ctx context.Context, id uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryRetriverMockRecorder) GetCategoryByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryRetriver)(nil).GetCategoryByID), ctx, id)
}

// GetCategoryByName mocks base method.
func (m *MockCategoryRetriver) GetCategoryByName(ctx context.Context, name string) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", ctx, name)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoryRetriverMockRecorder) GetCategoryByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategoryRetriver)(nil).GetCategoryByName), ctx, name)
}

// MockCategoryStore is a mock of CategoryStore interface.
type MockCategoryStore struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryStoreMockRecorder
}

// MockCategoryStoreMockRecorder is the mock recorder for MockCategoryStore.
type MockCategoryStoreMockRecorder struct {
	mock *MockCategoryStore
}

// NewMockCategoryStore creates a new mock instance.
func NewMockCategoryStore(ctrl *gomock.Controller) *MockCategoryStore {
	mock := &MockCategoryStore{ctrl: ctrl}
	mock.recorder = &MockCategoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryStore) EXPECT() *MockCategoryStoreMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryStore) CreateCategory(ctx context.Context, category domain.Category) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryStoreMockRecorder) CreateCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryStore)(nil).CreateCategory), ctx, category)
}

// GetAllCategories mocks base method.
func (m *MockCategoryStore) GetAllCategories(ctx context.Context) ([]domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoryStoreMockRecorder) GetAllCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryStore)(nil).GetAllCategories), ctx)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryStore) GetCategoryByID(ctx context.Context, id uint64) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryStoreMockRecorder) GetCategoryByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryStore)(nil).GetCategoryByID), ctx, id)
}

// GetCategoryByName mocks base method.
func (m *MockCategoryStore) GetCategoryByName(ctx context.Context, name string) (domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", ctx, name)
	ret0, _ := ret[0].(domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoryStoreMockRecorder) GetCategoryByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategoryStore)(nil).GetCategoryByName), ctx, name)
}
