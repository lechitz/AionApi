// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/output/db/category_output.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/ports/output/db/category_output.go -destination=tests/mocks/category/mock_category_store.go -package=categorymocks -mock_names=CategoryStore=MockCategoryStore
//

// Package categorymocks is a generated GoMock package.
package categorymocks

import (
	context "context"
	reflect "reflect"

	"github.com/lechitz/AionApi/internal/core/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryCreator is a mock of CategoryCreator interface.
type MockCategoryCreator struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryCreatorMockRecorder
	isgomock struct{}
}

// MockCategoryCreatorMockRecorder is the mock recorder for MockCategoryCreator.
type MockCategoryCreatorMockRecorder struct {
	mock *MockCategoryCreator
}

// NewMockCategoryCreator creates a new mock instance.
func NewMockCategoryCreator(ctrl *gomock.Controller) *MockCategoryCreator {
	mock := &MockCategoryCreator{ctrl: ctrl}
	mock.recorder = &MockCategoryCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryCreator) EXPECT() *MockCategoryCreatorMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryCreator) CreateCategory(ctx context.Context, category entity.Category) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryCreatorMockRecorder) CreateCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryCreator)(nil).CreateCategory), ctx, category)
}

// MockCategoryRetriver is a mock of CategoryRetriver interface.
type MockCategoryRetriver struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRetriverMockRecorder
	isgomock struct{}
}

// MockCategoryRetriverMockRecorder is the mock recorder for MockCategoryRetriver.
type MockCategoryRetriverMockRecorder struct {
	mock *MockCategoryRetriver
}

// NewMockCategoryRetriver creates a new mock instance.
func NewMockCategoryRetriver(ctrl *gomock.Controller) *MockCategoryRetriver {
	mock := &MockCategoryRetriver{ctrl: ctrl}
	mock.recorder = &MockCategoryRetriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRetriver) EXPECT() *MockCategoryRetriverMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method.
func (m *MockCategoryRetriver) GetAllCategories(ctx context.Context, userID uint64) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx, userID)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoryRetriverMockRecorder) GetAllCategories(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryRetriver)(nil).GetAllCategories), ctx, userID)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryRetriver) GetCategoryByID(ctx context.Context, category entity.Category) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, category)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryRetriverMockRecorder) GetCategoryByID(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryRetriver)(nil).GetCategoryByID), ctx, category)
}

// GetCategoryByName mocks base method.
func (m *MockCategoryRetriver) GetCategoryByName(ctx context.Context, category entity.Category) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", ctx, category)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoryRetriverMockRecorder) GetCategoryByName(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategoryRetriver)(nil).GetCategoryByName), ctx, category)
}

// MockCategoryUpdater is a mock of CategoryUpdater interface.
type MockCategoryUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryUpdaterMockRecorder
	isgomock struct{}
}

// MockCategoryUpdaterMockRecorder is the mock recorder for MockCategoryUpdater.
type MockCategoryUpdaterMockRecorder struct {
	mock *MockCategoryUpdater
}

// NewMockCategoryUpdater creates a new mock instance.
func NewMockCategoryUpdater(ctrl *gomock.Controller) *MockCategoryUpdater {
	mock := &MockCategoryUpdater{ctrl: ctrl}
	mock.recorder = &MockCategoryUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryUpdater) EXPECT() *MockCategoryUpdaterMockRecorder {
	return m.recorder
}

// UpdateCategory mocks base method.
func (m *MockCategoryUpdater) UpdateCategory(ctx context.Context, categoryID, userID uint64, fields map[string]any) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, categoryID, userID, fields)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryUpdaterMockRecorder) UpdateCategory(ctx, categoryID, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryUpdater)(nil).UpdateCategory), ctx, categoryID, userID, fields)
}

// MockCategoryDeleter is a mock of CategoryDeleter interface.
type MockCategoryDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryDeleterMockRecorder
	isgomock struct{}
}

// MockCategoryDeleterMockRecorder is the mock recorder for MockCategoryDeleter.
type MockCategoryDeleterMockRecorder struct {
	mock *MockCategoryDeleter
}

// NewMockCategoryDeleter creates a new mock instance.
func NewMockCategoryDeleter(ctrl *gomock.Controller) *MockCategoryDeleter {
	mock := &MockCategoryDeleter{ctrl: ctrl}
	mock.recorder = &MockCategoryDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryDeleter) EXPECT() *MockCategoryDeleterMockRecorder {
	return m.recorder
}

// SoftDeleteCategory mocks base method.
func (m *MockCategoryDeleter) SoftDeleteCategory(ctx context.Context, category entity.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteCategory indicates an expected call of SoftDeleteCategory.
func (mr *MockCategoryDeleterMockRecorder) SoftDeleteCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteCategory", reflect.TypeOf((*MockCategoryDeleter)(nil).SoftDeleteCategory), ctx, category)
}

// MockCategoryStore is a mock of CategoryStore interface.
type MockCategoryStore struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryStoreMockRecorder
	isgomock struct{}
}

// MockCategoryStoreMockRecorder is the mock recorder for MockCategoryStore.
type MockCategoryStoreMockRecorder struct {
	mock *MockCategoryStore
}

// NewMockCategoryStore creates a new mock instance.
func NewMockCategoryStore(ctrl *gomock.Controller) *MockCategoryStore {
	mock := &MockCategoryStore{ctrl: ctrl}
	mock.recorder = &MockCategoryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryStore) EXPECT() *MockCategoryStoreMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryStore) CreateCategory(ctx context.Context, category entity.Category) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryStoreMockRecorder) CreateCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryStore)(nil).CreateCategory), ctx, category)
}

// GetAllCategories mocks base method.
func (m *MockCategoryStore) GetAllCategories(ctx context.Context, userID uint64) ([]entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategories", ctx, userID)
	ret0, _ := ret[0].([]entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories.
func (mr *MockCategoryStoreMockRecorder) GetAllCategories(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryStore)(nil).GetAllCategories), ctx, userID)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryStore) GetCategoryByID(ctx context.Context, category entity.Category) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, category)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryStoreMockRecorder) GetCategoryByID(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryStore)(nil).GetCategoryByID), ctx, category)
}

// GetCategoryByName mocks base method.
func (m *MockCategoryStore) GetCategoryByName(ctx context.Context, category entity.Category) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByName", ctx, category)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByName indicates an expected call of GetCategoryByName.
func (mr *MockCategoryStoreMockRecorder) GetCategoryByName(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByName", reflect.TypeOf((*MockCategoryStore)(nil).GetCategoryByName), ctx, category)
}

// SoftDeleteCategory mocks base method.
func (m *MockCategoryStore) SoftDeleteCategory(ctx context.Context, category entity.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteCategory indicates an expected call of SoftDeleteCategory.
func (mr *MockCategoryStoreMockRecorder) SoftDeleteCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteCategory", reflect.TypeOf((*MockCategoryStore)(nil).SoftDeleteCategory), ctx, category)
}

// UpdateCategory mocks base method.
func (m *MockCategoryStore) UpdateCategory(ctx context.Context, categoryID, userID uint64, fields map[string]any) (entity.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, categoryID, userID, fields)
	ret0, _ := ret[0].(entity.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryStoreMockRecorder) UpdateCategory(ctx, categoryID, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryStore)(nil).UpdateCategory), ctx, categoryID, userID, fields)
}
