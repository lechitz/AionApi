// Code generated by MockGen. DO NOT EDIT.
// Source: /home/lechitz/Projetos/AionApi/internal/auth/core/ports/output/auth_store.go
//
// Generated by this command:
//
//	mockgen -source=/home/lechitz/Projetos/AionApi/internal/auth/core/ports/output/auth_store.go -destination=/home/lechitz/Projetos/AionApi/tests/mocks/auth_store_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/lechitz/AionApi/internal/auth/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthStore is a mock of AuthStore interface.
type MockAuthStore struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStoreMockRecorder
	isgomock struct{}
}

// MockAuthStoreMockRecorder is the mock recorder for MockAuthStore.
type MockAuthStoreMockRecorder struct {
	mock *MockAuthStore
}

// NewMockAuthStore creates a new mock instance.
func NewMockAuthStore(ctrl *gomock.Controller) *MockAuthStore {
	mock := &MockAuthStore{ctrl: ctrl}
	mock.recorder = &MockAuthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStore) EXPECT() *MockAuthStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAuthStore) Delete(ctx context.Context, tokenKey uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tokenKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthStoreMockRecorder) Delete(ctx, tokenKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthStore)(nil).Delete), ctx, tokenKey)
}

// Get mocks base method.
func (m *MockAuthStore) Get(ctx context.Context, tokenKey uint64) (domain.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tokenKey)
	ret0, _ := ret[0].(domain.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuthStoreMockRecorder) Get(ctx, tokenKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthStore)(nil).Get), ctx, tokenKey)
}

// Save mocks base method.
func (m *MockAuthStore) Save(ctx context.Context, token domain.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockAuthStoreMockRecorder) Save(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAuthStore)(nil).Save), ctx, token)
}
