// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/usecase/auth/logout_auth.go

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/lechitz/AionApi/internal/core/domain"
)

// MockSessionRevoker is a mock of SessionRevoker interface.
type MockSessionRevoker struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRevokerMockRecorder
}

// MockSessionRevokerMockRecorder is the mock recorder for MockSessionRevoker.
type MockSessionRevokerMockRecorder struct {
	mock *MockSessionRevoker
}

// NewMockSessionRevoker creates a new mock instance.
func NewMockSessionRevoker(ctrl *gomock.Controller) *MockSessionRevoker {
	mock := &MockSessionRevoker{ctrl: ctrl}
	mock.recorder = &MockSessionRevokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRevoker) EXPECT() *MockSessionRevokerMockRecorder {
	return m.recorder
}

// Logout mocks base method.
func (m *MockSessionRevoker) Logout(ctx domain.ContextControl, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockSessionRevokerMockRecorder) Logout(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockSessionRevoker)(nil).Logout), ctx, token)
}
