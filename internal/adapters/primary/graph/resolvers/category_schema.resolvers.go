package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"errors"

	"github.com/lechitz/AionApi/internal/adapters/primary/graph/model"
	"github.com/lechitz/AionApi/internal/shared/constants/ctxkeys"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.CreateCategoryInput) (*model.Category, error) {
	userID, _ := ctx.Value(ctxkeys.UserID).(uint64)
	if userID == 0 {
		return nil, errors.New("unauthenticated")
	}

	return r.CategoryController().Create(ctx, input, userID)
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, input model.UpdateCategoryInput) (*model.Category, error) {
	userID, _ := ctx.Value(ctxkeys.UserID).(uint64)
	if userID == 0 {
		return nil, errors.New("unauthenticated")
	}
	return r.CategoryController().Update(ctx, input, userID)
}

// SoftDeleteCategory is the resolver for the softDeleteCategory field.
func (r *mutationResolver) SoftDeleteCategory(ctx context.Context, input model.DeleteCategoryInput) (bool, error) {
	userID, _ := ctx.Value(ctxkeys.UserID).(uint64)
	if userID == 0 {
		return false, errors.New("unauthenticated")
	}
	if err := r.CategoryController().SoftDelete(ctx, input.ID, userID); err != nil {
		return false, err
	}

	return true, nil
}

// Categories is the resolver for the category field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	userID, _ := ctx.Value(ctxkeys.UserID).(uint64)
	if userID == 0 {
		return nil, errors.New("unauthenticated")
	}
	return r.CategoryController().ListAll(ctx, userID)
}

// CategoryByID is the resolver for the categoryById field.
func (r *queryResolver) CategoryByID(ctx context.Context, id string) (*model.Category, error) {
	userID, _ := ctx.Value(ctxkeys.UserID).(uint64)
	if userID == 0 {
		return nil, errors.New("unauthenticated")
	}
	return r.CategoryController().GetByID(ctx, id, userID)
}

// CategoryByName is the resolver for the categoryByName field.
func (r *queryResolver) CategoryByName(ctx context.Context, name string) (*model.Category, error) {
	userID, _ := ctx.Value(ctxkeys.UserID).(uint64)
	if userID == 0 {
		return nil, errors.New("unauthenticated")
	}
	return r.CategoryController().GetByName(ctx, name, userID)
}
