package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"errors"
	"fmt"
	"strconv"

	"github.com/lechitz/AionApi/internal/adapters/primary/graph/constants"
	"github.com/lechitz/AionApi/internal/adapters/primary/graph/model"
	"github.com/lechitz/AionApi/internal/core/domain"
	"github.com/lechitz/AionApi/internal/shared/constants/commonkeys"
	"github.com/lechitz/AionApi/internal/shared/constants/ctxkeys"
	"github.com/lechitz/AionApi/internal/shared/constants/tracingkeys"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, category model.DtoCreateCategory) (*model.Category, error) {
	tracer := otel.Tracer(constants.TracerCategory)
	ctx, span := tracer.Start(ctx, constants.SpanStartCreateCategory)
	defer span.End()

	span.AddEvent(constants.EventCreateCategory, trace.WithAttributes(TraceAttributesFromCategory(category)...))
	ip, userAgent := getClientMeta(ctx)

	userID, ok := ctx.Value(ctxkeys.UserID).(uint64)
	if !ok || userID == 0 {
		err := errors.New(constants.ErrUserIDNotFound)
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrUserIDNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.Input, fmt.Sprintf(constants.SprintfStructVerbose, category),
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	createCategory := domain.Category{
		UserID: userID,
		Name:   category.Name,
	}
	if category.Description != nil {
		createCategory.Description = *category.Description
	}
	if category.ColorHex != nil {
		createCategory.Color = *category.ColorHex
	}
	if category.Icon != nil {
		createCategory.Icon = *category.Icon
	}

	categoryDB, err := r.CategoryService.CreateCategory(ctx, createCategory)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrCategoryCreate,
			commonkeys.Error, err.Error(),
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			commonkeys.Input, fmt.Sprintf(constants.SprintfStructVerbose, category),
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	span.SetAttributes(
		attribute.String(commonkeys.CategoryName, categoryDB.Name),
		attribute.String(commonkeys.UserID, strconv.FormatUint(categoryDB.UserID, 10)),
		attribute.String(commonkeys.CategoryID, strconv.FormatUint(categoryDB.ID, 10)),
	)
	span.SetStatus(codes.Ok, constants.StatusCategoryCreated)
	span.AddEvent(constants.EventCategoryCreatedSuccess)

	r.Logger.InfowCtx(ctx, constants.MsgCategoryCreated,
		commonkeys.UserID, strconv.FormatUint(userID, 10),
		commonkeys.CategoryID, strconv.FormatUint(categoryDB.ID, 10),
		commonkeys.CategoryName, categoryDB.Name,
		tracingkeys.RequestIPKey, ip,
		tracingkeys.RequestUserAgentKey, userAgent,
	)
	return toGraphQLCategory(categoryDB), nil
}

// CreateTag is the resolver for the CreateTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.NewTag) (*model.Tags, error) {
	_ = ctx
	_ = input
	return nil, errors.New("not implemented")
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, category model.DtoUpdateCategory) (*model.Category, error) {
	tracer := otel.Tracer(constants.TracerCategory)
	ctx, span := tracer.Start(ctx, constants.SpanStartUpdateCategory)
	defer span.End()

	ip, userAgent := getClientMeta(ctx)

	span.AddEvent(constants.EventUpdateCategory, trace.WithAttributes(attribute.String(commonkeys.CategoryID, category.CategoryID)))
	userID, ok := ctx.Value(ctxkeys.UserID).(uint64)
	if !ok || userID == 0 {
		err := errors.New(constants.ErrUserIDNotFound)
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrUserIDNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.Input, fmt.Sprintf(constants.SprintfStructVerbose, category),
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	categoryIDUint, err := strconv.ParseUint(category.CategoryID, 10, 64)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.InvalidCategoryID,
			commonkeys.Error, err.Error(),
			commonkeys.Input, fmt.Sprintf(constants.SprintfStructVerbose, category),
		)
		return nil, errors.New(constants.InvalidCategoryID)
	}

	updateCategory := domain.Category{
		ID:     categoryIDUint,
		UserID: userID,
	}
	if category.Name != nil {
		updateCategory.Name = *category.Name
	}
	if category.Description != nil {
		updateCategory.Description = *category.Description
	}
	if category.ColorHex != nil {
		updateCategory.Color = *category.ColorHex
	}
	if category.Icon != nil {
		updateCategory.Icon = *category.Icon
	}

	categoryDB, err := r.CategoryService.UpdateCategory(ctx, updateCategory)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrCategoryUpdate,
			commonkeys.Error, err.Error(),
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			commonkeys.CategoryID, category.CategoryID,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	span.SetAttributes(
		attribute.String(commonkeys.CategoryID, category.CategoryID),
		attribute.String(commonkeys.CategoryName, categoryDB.Name),
	)
	span.SetStatus(codes.Ok, constants.StatusCategoryUpdated)
	span.AddEvent(constants.EventCategoryUpdatedSuccess)

	r.Logger.InfowCtx(ctx, constants.MsgCategoryUpdated,
		commonkeys.UserID, strconv.FormatUint(userID, 10),
		commonkeys.CategoryID, category.CategoryID,
		commonkeys.CategoryName, categoryDB.Name,
		tracingkeys.RequestIPKey, ip,
		tracingkeys.RequestUserAgentKey, userAgent,
	)
	return toGraphQLCategory(categoryDB), nil
}

// SoftDeleteCategory is the resolver for the softDeleteCategory field.
func (r *mutationResolver) SoftDeleteCategory(ctx context.Context, category model.DtoDeleteCategory) (bool, error) {
	tracer := otel.Tracer(constants.TracerCategory)
	ctx, span := tracer.Start(ctx, constants.SpanStartSoftDeleteCategory)
	defer span.End()

	ip, userAgent := getClientMeta(ctx)

	span.AddEvent(constants.EventSoftDeleteCategory, trace.WithAttributes(attribute.String(commonkeys.CategoryID, category.CategoryID)))

	userID, ok := ctx.Value(ctxkeys.UserID).(uint64)
	if !ok || userID == 0 {
		err := errors.New(constants.ErrUserIDNotFound)
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrUserIDNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.CategoryID, category.CategoryID,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return false, err
	}

	categoryIDUint, err := strconv.ParseUint(category.CategoryID, 10, 64)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.InvalidCategoryID,
			commonkeys.Error, err.Error(),
			commonkeys.CategoryID, category.CategoryID,
		)
		return false, errors.New(constants.InvalidCategoryID)
	}

	categoryDomain := domain.Category{
		ID:     categoryIDUint,
		UserID: userID,
	}

	if err := r.CategoryService.SoftDeleteCategory(ctx, categoryDomain); err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrCategorySoftDelete,
			commonkeys.Error, err.Error(),
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			commonkeys.CategoryID, category.CategoryID,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return false, err
	}

	span.SetStatus(codes.Ok, constants.StatusCategorySoftDeleted)
	span.AddEvent(constants.EventCategorySoftDeletedSuccess)

	r.Logger.InfowCtx(ctx, constants.MsgCategorySoftDeleted,
		commonkeys.UserID, strconv.FormatUint(userID, 10),
		commonkeys.CategoryID, category.CategoryID,
		tracingkeys.RequestIPKey, ip,
		tracingkeys.RequestUserAgentKey, userAgent,
	)
	return true, nil
}

// GetAllCategories is the resolver for the allCategories field.
func (r *queryResolver) GetAllCategories(ctx context.Context) ([]*model.Category, error) {
	tracer := otel.Tracer(constants.TracerCategory)
	ctx, span := tracer.Start(ctx, constants.SpanStartAllGetCategories)
	defer span.End()

	ip, userAgent := getClientMeta(ctx)

	span.AddEvent(constants.EventGetAllCategories)

	userID, ok := ctx.Value(ctxkeys.UserID).(uint64)
	if !ok || userID == 0 {
		err := errors.New(constants.ErrUserIDNotFound)
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrUserIDNotFound,
			commonkeys.Error, err.Error(),
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	span.SetAttributes(attribute.String(commonkeys.UserID, strconv.FormatUint(userID, 10)))

	categoryDB, err := r.CategoryService.GetAllCategories(ctx, userID)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, constants.ErrAllCategoriesNotFound)
		r.Logger.ErrorwCtx(ctx, constants.ErrAllCategoriesNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, errors.New(constants.ErrAllCategoriesNotFound)
	}

	categories := make([]*model.Category, len(categoryDB))
	for i, category := range categoryDB {
		categories[i] = toGraphQLCategory(category)
	}

	span.SetAttributes(attribute.Int(commonkeys.CategoriesCount, len(categories)))
	span.SetStatus(codes.Ok, constants.StatusAllCategoriesFetched)
	span.AddEvent(constants.EventAllCategoriesFetchedSuccess)

	r.Logger.InfowCtx(ctx, constants.MsgAllCategoriesFetched,
		commonkeys.UserID, strconv.FormatUint(userID, 10),
		commonkeys.CategoriesCount, len(categories),
		tracingkeys.RequestIPKey, ip,
		tracingkeys.RequestUserAgentKey, userAgent,
	)
	return categories, nil
}

// GetCategoryByID is the resolver for the getCategoryByID field.
func (r *queryResolver) GetCategoryByID(ctx context.Context, categoryRequest model.DtoGetCategoryByID) (*model.Category, error) {
	tracer := otel.Tracer(constants.TracerCategory)
	ctx, span := tracer.Start(ctx, constants.SpanStartGetCategoryByID)
	defer span.End()

	ip, userAgent := getClientMeta(ctx)

	span.AddEvent(constants.EventGetCategoryByID, trace.WithAttributes(attribute.String(commonkeys.CategoryID, categoryRequest.CategoryID)))

	userID, ok := ctx.Value(ctxkeys.UserID).(uint64)
	if !ok || userID == 0 {
		err := errors.New(constants.ErrUserIDNotFound)
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrUserIDNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.CategoryID, categoryRequest.CategoryID,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	span.SetAttributes(attribute.String(commonkeys.UserID, strconv.FormatUint(userID, 10)))

	categoryIDUint, err := strconv.ParseUint(categoryRequest.CategoryID, 10, 64)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.InvalidCategoryID,
			commonkeys.Error, err.Error(),
			commonkeys.CategoryID, categoryRequest.CategoryID,
		)
		return nil, errors.New(constants.InvalidCategoryID)
	}

	span.SetAttributes(attribute.String(commonkeys.CategoryID, categoryRequest.CategoryID))

	category := domain.Category{
		ID:     categoryIDUint,
		UserID: userID,
	}

	categoryDB, err := r.CategoryService.GetCategoryByID(ctx, category)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, constants.ErrCategoryNotFound)
		r.Logger.ErrorwCtx(ctx, constants.ErrCategoryNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			commonkeys.CategoryID, categoryRequest.CategoryID,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	span.SetStatus(codes.Ok, constants.StatusCategoryFetch)
	span.AddEvent(constants.EventCategoryFetchedSuccess)
	span.SetAttributes(
		attribute.String(commonkeys.CategoryName, categoryDB.Name),
		attribute.String(commonkeys.CategoryColor, categoryDB.Color),
	)

	r.Logger.InfowCtx(ctx, constants.MsgCategoryFetched,
		commonkeys.UserID, strconv.FormatUint(userID, 10),
		commonkeys.CategoryID, strconv.FormatUint(categoryDB.ID, 10),
		commonkeys.CategoryName, categoryDB.Name,
		tracingkeys.RequestIPKey, ip,
		tracingkeys.RequestUserAgentKey, userAgent,
	)
	return toGraphQLCategory(categoryDB), nil
}

// GetCategoryByName is the resolver for the getCategoryByName field.
func (r *queryResolver) GetCategoryByName(ctx context.Context, categoryRequest model.DtoGetCategoryByName) (*model.Category, error) {
	tracer := otel.Tracer(constants.TracerCategory)
	ctx, span := tracer.Start(ctx, constants.SpanStartGetCategoryByName)
	defer span.End()

	ip, userAgent := getClientMeta(ctx)

	span.AddEvent(constants.EventGetCategoryByName, trace.WithAttributes(attribute.String(commonkeys.CategoryName, categoryRequest.Name)))

	userID, ok := ctx.Value(ctxkeys.UserID).(uint64)
	if !ok || userID == 0 {
		err := errors.New(constants.ErrUserIDNotFound)
		span.RecordError(err)
		span.SetStatus(codes.Error, err.Error())
		r.Logger.ErrorwCtx(ctx, constants.ErrUserIDNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.CategoryName, categoryRequest.Name,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	span.SetAttributes(
		attribute.String(commonkeys.UserID, strconv.FormatUint(userID, 10)),
		attribute.String(commonkeys.CategoryName, categoryRequest.Name),
	)

	category := domain.Category{
		UserID: userID,
		Name:   categoryRequest.Name,
	}

	categoryDB, err := r.CategoryService.GetCategoryByName(ctx, category)
	if err != nil {
		span.RecordError(err)
		span.SetStatus(codes.Error, constants.ErrCategoryByNameNotFound)
		r.Logger.ErrorwCtx(ctx, constants.ErrCategoryByNameNotFound,
			commonkeys.Error, err.Error(),
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			commonkeys.CategoryName, categoryRequest.Name,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, err
	}

	if categoryDB.Name == "" {
		span.SetStatus(codes.Ok, constants.ErrCategoryNotFound)
		r.Logger.ErrorwCtx(ctx, constants.ErrCategoryNotFound,
			commonkeys.UserID, strconv.FormatUint(userID, 10),
			commonkeys.CategoryName, categoryRequest.Name,
			tracingkeys.RequestIPKey, ip,
			tracingkeys.RequestUserAgentKey, userAgent,
		)
		return nil, errors.New(constants.ErrCategoryNotFound)
	}

	span.SetStatus(codes.Ok, constants.StatusCategoryFetch)
	span.AddEvent(constants.EventCategoryFetchedSuccess)
	span.SetAttributes(
		attribute.String(commonkeys.CategoryID, strconv.FormatUint(categoryDB.ID, 10)),
		attribute.String(commonkeys.CategoryColor, categoryDB.Color),
	)

	r.Logger.InfowCtx(ctx, constants.MsgCategoryFetched,
		commonkeys.UserID, strconv.FormatUint(userID, 10),
		commonkeys.CategoryID, strconv.FormatUint(categoryDB.ID, 10),
		commonkeys.CategoryName, categoryDB.Name,
		tracingkeys.RequestIPKey, ip,
		tracingkeys.RequestUserAgentKey, userAgent,
	)
	return toGraphQLCategory(categoryDB), nil
}

// GetAllTags is the resolver for the GetAllTags field.
func (r *queryResolver) GetAllTags(ctx context.Context) ([]*model.Tags, error) {
	_ = ctx
	return nil, errors.New("not implemented: GetAllTags")
}

// GetTagByID is the resolver for the GetTagByID field.
func (r *queryResolver) GetTagByID(ctx context.Context, tagID string) (*model.Tags, error) {
	_ = ctx
	_ = tagID
	return nil, errors.New("not implemented: GetTagByID")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
