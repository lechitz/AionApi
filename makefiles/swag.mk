# ============================================================
#                         SWAG DOCS
# Purpose:
# - docs.gen:         generate/refresh committed swagger artifacts
# - docs.validate:    validate artifacts are up-to-date (no workspace changes)
# - docs.check-dirty: CI-only guard using git diff on tracked files
# ============================================================

SWAG_VERSION ?= v1.16.6
SWAG_BIN     ?= $(shell command -v swag || echo "$$(go env GOPATH)/bin/swag")
SWAG_OUT     ?= internal/platform/docs
SWAG_MAIN    ?= ./cmd/aion-api/main.go
SWAG_PKG     ?= docs

PERL_BIN     ?= $(shell command -v perl)

.PHONY: tools.s swag docs.gen docs.clean docs.check-dirty docs.validate

tools.s:
	@echo ">> ensuring tools"

swag: tools.s
	@echo ">> installing swag $(SWAG_VERSION)"
	@GOBIN=$$(go env GOPATH)/bin go install github.com/swaggo/swag/cmd/swag@$(SWAG_VERSION)

docs.gen: swag
	@echo ">> generating swagger docs"
	@"$(SWAG_BIN)" init \
		-g "$(SWAG_MAIN)" \
		-o "$(SWAG_OUT)" \
		--packageName "$(SWAG_PKG)" \
		--parseDependency \
		--parseInternal

	@echo ">> patching generated docs.go for lint (godot + nolintlint, with reasons; idempotent)"
	@[ -n "$(PERL_BIN)" ] || (echo "Perl not found. Please install Perl to patch generated docs."; exit 1)
	@[ -f "$(SWAG_OUT)/docs.go" ] || (echo "$(SWAG_OUT)/docs.go not found"; exit 1)
	@$(PERL_BIN) -0777 -i -pe 's{^// SwaggerInfo holds exported Swagger Info so clients can modify it(?!\.)$$}{$$&.}m' "$(SWAG_OUT)/docs.go"
	@$(PERL_BIN) -0777 -i -pe 's{^(var SwaggerInfo = \&swag\.Spec\{)(?!.*gochecknoglobals)}{$$1 //nolint:gochecknoglobals // generated by swag: global spec is required for registration}m' "$(SWAG_OUT)/docs.go"
	@$(PERL_BIN) -0777 -i -pe 's{^(func init\(\) \{)(?!.*gochecknoinits)}{$$1 //nolint:gochecknoinits // generated by swag: init is required to register spec}m' "$(SWAG_OUT)/docs.go"

docs.clean:
	@echo ">> cleaning swagger docs"
	@rm -rf "$(SWAG_OUT)"

# CI-only guard that fails if tracked swagger artifacts changed vs HEAD.
docs.check-dirty:
	@git diff --quiet -- "$(SWAG_OUT)" || (echo "Swagger docs out-of-date. Run 'make docs.gen'."; exit 1)

# Local guard that does NOT modify the workspace:
# 1) generate to a temp dir OUTSIDE of compare tree ($TMP_DIR/out)
# 2) apply same lint patches
# 3) diff with committed artifacts and print differences if any
docs.validate: swag
	@echo ">> validating swagger docs (no workspace changes)"
	@TMP_DIR=$$(mktemp -d); \
	set -eu; \
	TMP_OUT="$$TMP_DIR/out"; \
	mkdir -p "$$TMP_OUT"; \
	"$(SWAG_BIN)" init \
		-g "$(SWAG_MAIN)" \
		-o "$$TMP_OUT" \
		--packageName "$(SWAG_PKG)" \
		--parseDependency \
		--parseInternal ; \
	if [ -n "$(PERL_BIN)" ] && [ -f "$$TMP_OUT/docs.go" ]; then \
		"$(PERL_BIN)" -0777 -i -pe 's{^// SwaggerInfo holds exported Swagger Info so clients can modify it(?!\.)$$}{$$&.}m' "$$TMP_OUT/docs.go"; \
		"$(PERL_BIN)" -0777 -i -pe 's{^(var SwaggerInfo = \&swag\.Spec\{)(?!.*gochecknoglobals)}{$$1 //nolint:gochecknoglobals // generated by swag: global spec is required for registration}m' "$$TMP_OUT/docs.go"; \
		"$(PERL_BIN)" -0777 -i -pe 's{^(func init\(\) \{)(?!.*gochecknoinits)}{$$1 //nolint:gochecknoinits // generated by swag: init is required to register spec}m' "$$TMP_OUT/docs.go"; \
	fi; \
	if ! diff -qr "$(SWAG_OUT)" "$$TMP_OUT" > "$$TMP_DIR/diff.txt"; then \
		echo "Swagger docs out-of-date. Differences:"; \
		cat "$$TMP_DIR/diff.txt"; \
		rm -rf "$$TMP_DIR"; \
		exit 1; \
	fi; \
	rm -rf "$$TMP_DIR"; \
	echo ">> swagger docs OK"
