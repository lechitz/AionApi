{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AionApi Documentation","text":"<p>Bem-vindo! Este site concentra a documenta\u00e7\u00e3o do backend AionApi (Go, Hexagonal, REST/GraphQL, PostgreSQL, Redis, OpenTelemetry).</p>"},{"location":"#secoes-sugeridas","title":"Se\u00e7\u00f5es sugeridas","text":"<ul> <li>Getting Started: instala\u00e7\u00e3o, <code>make</code> e ambiente dev.</li> <li>Architecture: Ports &amp; Adapters, camadas e conven\u00e7\u00f5es.</li> <li>Platform: HTTP Router (port + chi), Observability (OTel), Config.</li> <li>API: REST endpoints e opera\u00e7\u00f5es GraphQL.</li> <li>Guides: como rodar migrations, seeds, mocks, testes e cobertura.</li> </ul> <p>Edite livremente esta p\u00e1gina e adicione novas em <code>docs/</code>.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>This document explains how AionApi is organized and how requests move through the system. It\u2019s a practical guide for contributors who want to understand the Hexagonal (Ports &amp; Adapters) structure, observability, config, and testing strategy.</p> <p>TL;DR</p> <ul> <li>Ports &amp; Adapters with clean, testable boundaries  </li> <li>Primary adapters (HTTP/GraphQL) stay thin; Usecases hold business rules; Secondary adapters isolate infra  </li> <li>Observability-first: OpenTelemetry traces + structured logs, Prometheus metrics, Grafana dashboards  </li> <li>Consistency: shared error types, response helpers, constants, and middleware</li> </ul>"},{"location":"architecture/#1-high-level-layout","title":"1) High-level layout","text":"<pre><code>\ncmd/                    # app entrypoint\ninfrastructure/         # docker, migrations, otel/prometheus/grafana, loki/fluentbit\ninternal/ &lt;context&gt;/            # bounded contexts (auth, user, category, tag, admin)\nadapter/\nprimary/          # inbound adapters (http / graphql)\nsecondary/        # outbound adapters (db, cache, token, logger)\ncore/               # domain + ports + usecases (business logic)\nplatform/             # cross-cutting platform: config, bootstrap, server, observability\nshared/               # reusable helpers: constants, responses, validation, errors\nmakefiles/              # grouped Make targets used by the root Makefile\ntests/                  # unit test suites, mocks, fixtures, coverage\n\n</code></pre> <p>Bounded contexts currently present: <code>auth</code>, <code>user</code>, <code>category</code>, <code>tag</code>, <code>admin</code>.</p>"},{"location":"architecture/#2-hexagonal-ports-adapters","title":"2) Hexagonal (Ports &amp; Adapters)","text":"<p>Why: decouple business logic from frameworks and vendors; make the core testable and stable.</p> <ul> <li>Core / Usecases (<code>internal/*/core/usecase</code>):   Implements input-port interfaces. Pure go, no HTTP/ORM/Redis types. Accepts <code>context.Context</code>, returns domain or semantic errors.</li> <li>Primary Adapters (<code>internal/*/adapter/primary</code>):   Transport-facing (HTTP or GraphQL). Decode/validate \u2192 call input ports \u2192 map domain \u2192 response. No business rules here.</li> <li>Secondary Adapters (<code>internal/*/adapter/secondary</code>):   Implement output-port interfaces (DB/Cache/Token/Logger). Hide GORM/Redis/JWT behind small interfaces.</li> </ul> <p>Shared contracts &amp; helpers live under: - <code>internal/shared/sharederrors</code> \u2014 semantic errors (validation, not_found, conflict, unauthorized, internal, \u2026) - <code>internal/shared/httpresponse</code> \u2014 opinionated JSON envelope + error\u2192HTTP mapping - <code>internal/shared/constants</code> \u2014 keys for logs/headers/claims/tracing - <code>internal/shared/handlerhelpers</code> \u2014 boundary validation + tracing-friendly responses</p>"},{"location":"architecture/#3-request-lifecycles","title":"3) Request lifecycles","text":""},{"location":"architecture/#31-rest-example-update-user-password","title":"3.1 REST (example: Update user password)","text":"<ol> <li>HTTP route (primary adapter) <code>internal/user/adapter/primary/http/handler/update_password_user_handler.go</code></li> <li>DTO validation <code>internal/user/adapter/primary/http/dto/update_password_dto.go</code></li> <li>Call usecase <code>internal/user/core/usecase/update_password.go</code></li> <li>Usecase orchestration </li> <li><code>repo.GetByID</code> \u2192 <code>hasher.Compare</code> \u2192 <code>hasher.Hash</code> \u2192 <code>repo.Update</code> </li> <li><code>tokenProvider.Generate</code> \u2192 <code>authStore.Save</code></li> <li>Response mapping <code>internal/shared/httpresponse</code> writes a standardized JSON and status code</li> <li>Observability    Span created in handler &amp; usecase; canonical attributes added (user_id, operation, http_status)</li> </ol>"},{"location":"architecture/#32-graphql-example-create-category","title":"3.2 GraphQL (example: Create category)","text":"<ol> <li>Resolver calls handler <code>internal/category/adapter/primary/graphql/resolver/*</code> \u2192 handler <code>Create</code></li> <li>Handler maps GraphQL input \u2192 domain input, starts span <code>internal/category/adapter/primary/graphql/handler/create.go</code></li> <li>Usecase applies rules and calls repo via output ports <code>internal/category/core/usecase/create.go</code></li> <li>Repo persists with GORM and maps DB \u2194 domain <code>internal/category/adapter/secondary/db/repository/create.go</code></li> <li>Handler maps domain \u2192 GraphQL model and returns to resolver</li> </ol>"},{"location":"architecture/#4-platform-layer","title":"4) Platform layer","text":"<ul> <li>Config (<code>internal/platform/config</code>)   Loads &amp; validates env vars, normalizes paths/timeouts, may generate a dev-only secret if missing.</li> <li>Bootstrap (<code>internal/platform/bootstrap</code>)   Wires concrete adapters (DB, cache, token, hasher, logger) and constructs services (usecases).</li> <li>HTTP server (<code>internal/platform/server/http</code>)  </li> <li>Router port + chi adapter </li> <li>Generic handlers: <code>/health</code>, 404/405, error/recovery  </li> <li>Middlewares: <code>requestid</code>, <code>recovery</code> </li> <li>Composer mounts all context routes and GraphQL</li> <li>GraphQL server (<code>internal/platform/server/graph</code>)   Gathers schema modules from contexts; <code>make graphql</code> runs gqlgen and assembles the executable schema.</li> <li>Observability (<code>internal/platform/observability</code>)   OTel tracer/meter providers (OTLP over HTTP), resource attributes, and helper utilities.</li> </ul>"},{"location":"architecture/#5-persistence-data-rules","title":"5) Persistence &amp; data rules","text":"<ul> <li>ORM: GORM models live in <code>internal/&lt;context&gt;/adapter/secondary/db/model</code>.   Mapping functions in <code>mapper/</code> translate DB \u2194 domain; the domain never sees GORM structs.</li> <li>Repositories:   Implement CRUD with context-aware DB calls (<code>db.WithContext(ctx)</code>), set span attributes, and translate driver errors to <code>sharederrors</code>.</li> <li>Soft delete:   Reads must exclude <code>deleted_at</code>; updates return not-found when rows affected = 0.</li> <li>Migrations:   SQL files in <code>infrastructure/db/migrations</code>. Use <code>make migrate-up</code> / <code>make migrate-down</code>.   DSN provided via <code>MIGRATION_DB</code> (see <code>makefiles/migrate.mk</code>).</li> </ul>"},{"location":"architecture/#6-security-auth-http","title":"6) Security &amp; Auth (HTTP)","text":"<ul> <li>Login: <code>auth</code> usecase verifies credentials, issues token (<code>AuthProvider</code>), stores reference in cache (<code>AuthStore</code>).  </li> <li>Middleware (primary HTTP adapter): validates <code>Authorization: Bearer &lt;token&gt;</code>, resolves <code>user_id</code>, injects into <code>context</code>.  </li> <li>Cookies: helpers in <code>internal/shared/httputils</code> to set secure/HTTPOnly cookies when applicable.  </li> <li>Never log secrets (passwords, raw tokens, cookie values).</li> </ul>"},{"location":"architecture/#7-observability","title":"7) Observability","text":"<ul> <li>Tracing:   Consistent tracer names (e.g., <code>aionapi.user.usecase</code>, <code>aionapi.user.repository</code>, <code>aionapi.graphql.handler</code>).   Each handler/usecase/repo opens a span, sets canonical attributes (operation, ids, status), records errors.</li> <li>Metrics:   Prometheus scrape via <code>infrastructure/observability/prometheus/prometheus.yml</code>.  </li> <li>Dashboards:   Grafana provisioning + a sample dashboard under <code>infrastructure/observability/grafana/dashboards/</code>.</li> <li>Logs:   Structured with contextual keys from <code>shared/constants/commonkeys</code>. Fluent Bit + Loki optional.</li> </ul>"},{"location":"architecture/#8-errors-responses","title":"8) Errors &amp; responses","text":"<ul> <li>Domain errors come from <code>shared/sharederrors</code>.  </li> <li>HTTP mapping is centralized in <code>shared/httpresponse</code>:  </li> <li><code>validation</code> \u2192 400  </li> <li><code>unauthorized</code> \u2192 401  </li> <li><code>forbidden</code> \u2192 403  </li> <li><code>not_found</code> \u2192 404  </li> <li><code>conflict</code> \u2192 409  </li> <li><code>rate_limited</code> \u2192 429  </li> <li><code>internal</code> \u2192 500</li> <li>Consistency: All adapters return the same envelope shape.</li> </ul>"},{"location":"architecture/#9-concurrency-context","title":"9) Concurrency &amp; context","text":"<ul> <li>Always pass <code>context.Context</code> through handlers, usecases, and repos.  </li> <li>Use deadlines/timeouts from config (HTTP/GraphQL).  </li> <li>Never block without honoring ctx cancellation.</li> </ul>"},{"location":"architecture/#10-testing-strategy","title":"10) Testing strategy","text":"<ul> <li>Unit tests target usecases with port mocks (gomock).   Suites in <code>tests/setup</code> and generated mocks in <code>tests/mocks</code>.</li> <li>Transport tests exercise handlers with fake services.  </li> <li>Coverage: <code>make test-cover</code> \u2192 <code>tests/coverage/coverage.html</code>.  </li> <li>GraphQL codegen + mocks are part of the local pipeline: <code>make verify</code>.</li> </ul>"},{"location":"architecture/#11-code-generation-tooling","title":"11) Code generation &amp; tooling","text":"<ul> <li>GraphQL: <code>make graphql</code> copies <code>*.graphqls</code> from contexts into the platform graph module and runs <code>gqlgen</code> + <code>go mod tidy</code>.</li> <li>Mocks: <code>make mocks</code> generates gomock doubles for all output ports under <code>tests/mocks/</code> (flat or namespaced mode).</li> <li>Quality: <code>make format</code>, <code>make lint</code>, <code>make lint-fix</code>.</li> <li>Dev/Prod stacks: <code>make dev</code>, <code>make prod</code> orchestrate Docker Compose with env files under <code>infrastructure/docker/environments/</code>.</li> </ul>"},{"location":"architecture/#12-adding-a-new-bounded-context-checklist","title":"12) Adding a new bounded context (checklist)","text":"<ol> <li>Core </li> <li><code>internal/&lt;ctx&gt;/core/domain</code> (entities/VOs)  </li> <li><code>internal/&lt;ctx&gt;/core/ports</code> (input/output)  </li> <li><code>internal/&lt;ctx&gt;/core/usecase</code> (service + validations + errors)</li> <li>Adapters </li> <li>Primary: <code>http</code> and/or <code>graphql</code> (DTOs, handlers, resolver, thin mapping)  </li> <li>Secondary: <code>db</code> (model/mapper/repository), <code>cache</code>, or any external port implementation</li> <li>Platform wiring </li> <li>Add repos/services in <code>internal/platform/bootstrap</code> </li> <li>Mount routes in <code>internal/platform/server/http/composer.go</code> (and/or GraphQL handler)</li> <li>Schema / codegen </li> <li>If GraphQL, drop <code>schema/&lt;ctx&gt;.graphqls</code> and run <code>make graphql</code></li> <li>Tests </li> <li>Add gomock expectations &amp; table tests for usecases  </li> <li>Add handler tests with fake services</li> <li>Docs </li> <li>Create <code>docs/&lt;ctx&gt;.md</code> and link from <code>mkdocs.yml</code></li> </ol>"},{"location":"architecture/#13-style-conventions","title":"13) Style &amp; conventions","text":"<ul> <li>Primary adapters: thin, transport-only, start spans, use shared helpers, never touch ORM/cache.  </li> <li>Usecases: pure business rules; input/output ports only; return domain + semantic errors.  </li> <li>Secondary adapters: context-aware DB/Cache calls; map infra errors to domain errors; log metadata only.  </li> <li>Shared constants: no magic strings (claims, headers, log keys, trace attrs).</li> </ul>"},{"location":"architecture/#14-glossary","title":"14) Glossary","text":"<ul> <li>Primary adapter: inbound interface (HTTP/GraphQL) that calls the domain via input ports.  </li> <li>Usecase (core): application/business logic that coordinates ports.  </li> <li>Secondary adapter: outbound implementation for repositories or external services.  </li> <li>Port: interface owned by the domain that expresses what it needs (output) or offers (input).  </li> <li>Semantic error: a typed error category (<code>validation</code>, <code>not_found</code>, \u2026) that maps to consistent transports.</li> </ul> <p>```</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to AionApi. This page takes you from zero to a working local environment with Docker, the database migrated, tests passing, and a few REST/GraphQL calls verified.</p>"},{"location":"getting-started/#tldr-fast-path","title":"TL;DR (fast path)","text":"<pre><code># 1) Clone and enter the project\ngit clone https://github.com/lechitz/AionApi.git\ncd AionApi\n\n# 2) (Optional, recommended) install local dev tools\nmake tools-install\n\n# 3) Bring up the DEV stack (Docker + Postgres)\nmake dev\n\n# 4) Apply database migrations\nexport MIGRATE_BIN=\"$(go env GOPATH)/bin/migrate\"\nexport MIGRATION_DB=\"postgres://aion:aion@localhost:5432/aionapi?sslmode=disable\"\nexport MIGRATION_PATH=\"infrastructure/db/migrations\"\nmake migrate-up\n\n# 5) (Optional) Seed sample data\nmake seed-all\n\n# 6) Health check\ncurl -s http://localhost:8080/aion-api/health | jq\n</code></pre> <p>If things are ok, you should see a JSON payload containing the service name/version/environment.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.24+</li> <li>Docker and Docker Compose (v2)</li> <li>make (GNU Make)</li> <li>(Optional) jq to pretty-print JSON on the CLI</li> </ul> <p>If you prefer not to install Go on your host (using only Docker), you still need the <code>migrate</code> CLI to run DB migrations via Make. Use <code>make tools-install</code> to install all expected tools under your <code>GOPATH/bin</code>.</p>"},{"location":"getting-started/#repository-layout-essentials","title":"Repository layout (essentials)","text":"<pre><code>AionApi/\n\u251c\u2500 infrastructure/\n\u2502  \u251c\u2500 db/\n\u2502  \u2502  \u251c\u2500 migrations/         # *.sql (schema &amp; changesets)\n\u2502  \u2502  \u2514\u2500 seed/               # sample data\n\u2502  \u2514\u2500 docker/\n\u2502     \u251c\u2500 Dockerfile          # app build\n\u2502     \u2514\u2500 environments/\n\u2502        \u2514\u2500 dev/docker-compose-dev.yaml\n\u251c\u2500 internal/                 # domain, ports &amp; adapters (HTTP/GraphQL/DB/etc.)\n\u251c\u2500 makefiles/                # grouped Make targets (migrate, docker, test, etc.)\n\u251c\u2500 Makefile                  # includes makefiles/*\n\u2514\u2500 README.md\n</code></pre>"},{"location":"getting-started/#environment-configuration","title":"Environment configuration","text":"<p>For local development, <code>docker-compose-dev.yaml</code> already provides sensible defaults (Postgres on <code>localhost:5432</code>, API on <code>localhost:8080</code>). If you need to customize values, create a <code>.env.dev</code> (optional):</p> <pre><code># illustrative example \u2014 adjust to your needs\ncp infrastructure/docker/environments/example/.env.example infrastructure/docker/environments/dev/.env.dev\n# edit infrastructure/docker/environments/dev/.env.dev\n</code></pre> <p>If you skip <code>.env.dev</code>, the compose defaults are enough to boot the stack.</p>"},{"location":"getting-started/#bring-up-the-dev-stack","title":"Bring up the DEV stack","text":"<pre><code>make dev       # (= image build + docker compose up)\n# or, if you built recently:\nmake dev-up\n# to stop and remove volumes for this stack:\nmake dev-down\n</code></pre> <p>Expected services:</p> <ul> <li>Postgres: <code>localhost:5432</code> (db <code>aionapi</code>, user <code>aion</code>, pass <code>aion</code>)</li> <li>API: <code>localhost:8080</code> (REST base prefix: <code>/aion-api</code>, GraphQL: <code>/graphql</code>)</li> </ul> <p>Health check:</p> <pre><code>curl -s http://localhost:8080/aion-api/health | jq\n</code></pre>"},{"location":"getting-started/#database-migrations-seeds","title":"Database: migrations &amp; seeds","text":""},{"location":"getting-started/#install-migrate-once","title":"Install <code>migrate</code> (once)","text":"<pre><code>make tools-install\n# ensures: migrate, golangci-lint, gqlgen, etc. in your $GOPATH/bin\n</code></pre>"},{"location":"getting-started/#environment-variables-expected-by-migration-targets","title":"Environment variables expected by migration targets","text":"<pre><code>export MIGRATE_BIN=\"$(go env GOPATH)/bin/migrate\"\nexport MIGRATION_DB=\"postgres://aion:aion@localhost:5432/aionapi?sslmode=disable\"\nexport MIGRATION_PATH=\"infrastructure/db/migrations\"\n</code></pre>"},{"location":"getting-started/#applyrollback-migrations","title":"Apply/rollback migrations","text":"<pre><code>make migrate-up        # apply all \"up\" migrations\nmake migrate-down      # rollback one step\n# advanced usage:\nmake migrate-force VERSION=20250101010101  # force version (\u26a0\ufe0f beware)\n</code></pre>"},{"location":"getting-started/#seeds","title":"Seeds","text":"<pre><code># executes SQL seed scripts inside the DEV Postgres container\nmake seed-users\nmake seed-categories\nmake seed-all\n</code></pre>"},{"location":"getting-started/#tests-coverage-code-quality","title":"Tests, coverage &amp; code quality","text":"<pre><code>make test           # unit tests with -race\nmake test-cover     # coverage + HTML at tests/coverage/coverage.html\nmake test-html-report\nmake format         # goimports + golines (gofumpt)\nmake lint           # golangci-lint\nmake lint-fix       # attempt autofix\nmake verify         # local pipeline: graphql \u2192 mocks \u2192 lint \u2192 test \u2192 coverage\n</code></pre> <p>Open the coverage report in your browser:</p> <pre><code>tests/coverage/coverage.html\n</code></pre>"},{"location":"getting-started/#codegen-graphql-mocks","title":"Codegen (GraphQL &amp; Mocks)","text":"<p>These targets keep generated artifacts in sync with the source code.</p> <pre><code># (re)generate GraphQL types/resolvers from *.graphqls\nmake graphql\n\n# generate mocks (GoMock) for output-port interfaces (saved in tests/mocks/)\nmake mocks\n# namespaced filenames to avoid basename collisions:\nmake mocks NAMESPACE=1\n# generate only for a specific context:\nmake mocks CONTEXT=user\n</code></pre>"},{"location":"getting-started/#using-the-api-rest","title":"Using the API (REST)","text":"<p>REST base prefix: <code>/aion-api</code></p>"},{"location":"getting-started/#create-user","title":"Create user","text":"<pre><code>curl -X POST http://localhost:8080/aion-api/v1/users/create \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"username\": \"alice\",\n    \"email\": \"alice@example.com\",\n    \"password\": \"s3cret\"\n  }'\n</code></pre>"},{"location":"getting-started/#login-obtain-token","title":"Login (obtain token)","text":"<pre><code>TOKEN=$(curl -s -X POST http://localhost:8080/aion-api/v1/auth/login \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\":\"alice\",\"password\":\"s3cret\"}' | jq -r '.token')\necho \"$TOKEN\"\n</code></pre>"},{"location":"getting-started/#list-users-protected-route","title":"List users (protected route)","text":"<pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8080/aion-api/v1/users/all | jq\n</code></pre> <p>Other useful routes: <code>GET /aion-api/v1/users/{user_id}</code> <code>PUT /aion-api/v1/users/</code> (update self) <code>PUT /aion-api/v1/users/password</code> <code>DELETE /aion-api/v1/users/</code></p>"},{"location":"getting-started/#using-the-api-graphql","title":"Using the API (GraphQL)","text":"<ul> <li>Endpoint: <code>http://localhost:8080/graphql</code></li> </ul> <p>List categories (query):</p> <pre><code>curl -s http://localhost:8080/graphql \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"query\":\"query { listAllCategories { id name colorHex } }\"}' | jq\n</code></pre> <p>Create category (mutation):</p> <pre><code>curl -s http://localhost:8080/graphql \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"query\":\"mutation { createCategory(input:{name:\\\"Work\\\", colorHex:\\\"#3366FF\\\"}) { id name colorHex } }\"}' | jq\n</code></pre> <p>If your instance requires auth for GraphQL, include <code>Authorization: Bearer $TOKEN</code> in the headers.</p>"},{"location":"getting-started/#observability-optional-in-dev","title":"Observability (optional in DEV)","text":"<p>The platform is wired for OpenTelemetry (traces/metrics). To export to a local Collector, configure environment variables like:</p> <pre><code>export OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:4318\"\nexport OTEL_SERVICE_NAME=\"AionApi\"\nexport OTEL_SERVICE_VERSION=\"0.1.0\"\n</code></pre> <p>Useful files:</p> <ul> <li><code>infrastructure/observability/otel/otel-collector-config.yaml</code></li> <li><code>infrastructure/observability/grafana/</code> (dashboards)</li> <li><code>infrastructure/observability/prometheus/prometheus.yml</code></li> </ul> <p>You can extend your local stack to include these services via Docker Compose, as needed.</p>"},{"location":"getting-started/#tips-troubleshooting","title":"Tips &amp; Troubleshooting","text":"<ul> <li> <p><code>migrate: command not found</code>   Run <code>make tools-install</code> and ensure <code>$(go env GOPATH)/bin</code> is in your <code>PATH</code>.</p> </li> <li> <p>Cannot connect to Postgres   Check running containers with <code>docker ps</code>, free port <code>5432</code>, and the DSN in <code>MIGRATION_DB</code>.</p> </li> <li> <p>Port 8080 is already in use   Stop the service occupying it or change the HTTP port via env vars and restart.</p> </li> <li> <p>401 on protected routes   Verify the <code>Authorization: Bearer &lt;TOKEN&gt;</code> header is present and the token is valid.</p> </li> <li> <p>Unexpected 404/405   Remember the REST base prefix <code>/aion-api</code>.</p> </li> </ul>"},{"location":"getting-started/#whats-next","title":"What\u2019s next","text":"<ul> <li>Architecture: high-level view (Ports &amp; Adapters), conventions, and boundaries.</li> <li>Platform: Config, Router (port + chi), Observability.</li> <li>API Reference: details for each REST route and GraphQL operation.</li> </ul> <p>These pages will be published in the next sections of the documentation.</p>"},{"location":"platform/","title":"Platform","text":"<p>This page describes the cross\u2011cutting platform layer that powers AionApi: configuration, dependency bootstrap, HTTP/GraphQL servers, middlewares, observability, and Docker environments. If you\u2019re wiring a new context (feature) or deploying locally, start here.</p> <p>TL;DR</p> <ul> <li>Typed Config from env vars, with sane defaults and validation</li> <li>Central Bootstrap that wires DB, cache, token, hasher, logger</li> <li>Framework\u2011agnostic Router Port + chi adapter</li> <li>First\u2011class Observability (OpenTelemetry traces/metrics, Prometheus, Grafana)</li> <li>Clear separation of concerns: platform vs. domain</li> </ul>"},{"location":"platform/#1-directory-map-platform-layer","title":"1) Directory map (platform layer)","text":"<pre><code>internal/platform/\n  bootstrap/         # build infra adapters + services, return AppDependencies + cleanup\n  config/            # env \u2192 typed config + validation/normalization\n  server/\n    http/            # router port, chi adapter, generic handlers, middlewares, composer\n    graph/           # GraphQL wiring (schema assembly via make graphql)\n  observability/     # OTel tracer/meter setup (OTLP/HTTP), helpers\n</code></pre> <p>Complementary infra lives under <code>infrastructure/</code> (Docker, migrations, OTEL, Prometheus, Grafana, Loki/Fluent Bit).</p>"},{"location":"platform/#2-configuration","title":"2) Configuration","text":"<p>The <code>config</code> package loads environment variables into a typed struct, validates values, and normalizes things like the HTTP context path.</p>"},{"location":"platform/#21-quick-example-env","title":"2.1 Quick example (env)","text":"<pre><code># General\nAPP_NAME=AionApi\nAPP_ENV=development\nAPP_VERSION=0.1.0\n\n# HTTP\nSERVER_HTTP_CONTEXT=/aion-api\nSERVER_HTTP_PORT=8080\nSHUTDOWN_TIMEOUT=5s\n\n# GraphQL\nGRAPHQL_PATH=/graphql\nGRAPHQL_TIMEOUT=5s\nGRAPHQL_PLAYGROUND=true\n\n# Database\nDB_HOST=localhost\nDB_PORT=5432\nDB_USER=aion\nDB_PASSWORD=secret\nDB_NAME=aionapi\nDB_SSLMODE=disable\nDB_MAX_OPEN_CONNS=25\nDB_MAX_IDLE_CONNS=25\nDB_CONN_MAX_LIFETIME=30m\n\n# Cache (Redis)\nCACHE_ADDR=localhost:6379\nCACHE_DB=0\nCACHE_PASSWORD=\n\n# Secrets\nSECRET_KEY=super-long-random-hex\n\n# Observability (OTLP over HTTP)\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\nOTEL_SERVICE_NAME=AionApi\nOTEL_SERVICE_VERSION=0.1.0\nOTEL_EXPORTER_OTLP_HEADERS=x-api-key=dev\nOTEL_INSECURE=true\n</code></pre> <p>Tip</p> <p>In dev, if <code>SECRET_KEY</code> is missing, the loader may generate a temporary key and log a warning. Always set a real key in production.</p>"},{"location":"platform/#22-guarantees","title":"2.2 Guarantees","text":"<ul> <li>Minimal timeouts are enforced (HTTP/GraphQL) to avoid foot\u2011guns.</li> <li><code>SERVER_HTTP_CONTEXT</code> is normalized to <code>\"/prefix\"</code> with no trailing slash.</li> <li>Config contains only platform\u2011level concerns; domain code receives values already parsed and validated.</li> </ul>"},{"location":"platform/#3-bootstrap-composition-root","title":"3) Bootstrap (composition root)","text":"<p>The <code>bootstrap</code> package constructs infrastructure adapters and wires usecases (services) through domain ports.</p> <p>Responsibilities:</p> <ol> <li>Build secondary adapters: Postgres (GORM), Redis, token provider (e.g., JWT), password hasher (bcrypt/argon2), context logger (Zap), etc.</li> <li>Instantiate repositories and stores.</li> <li>Construct usecase services (Auth, User, Category, Tag, Admin) via input ports.</li> <li>Return <code>*AppDependencies</code> and a <code>cleanup(ctx)</code> function to gracefully close DB/cache.</li> </ol> <p>Pseudocode:</p> <pre><code>// InitializeDependencies(ctx, cfg, log) (*AppDependencies, cleanup, error)\n// - Connect DB (GORM) + Redis\n// - New token provider + hasher + logger\n// - New repositories/stores\n// - New usecase services\n// - return deps + cleanup\n</code></pre> <p>Note</p> <p>The bootstrap does not mount HTTP routes or start servers. It only builds dependencies.</p>"},{"location":"platform/#4-http-server","title":"4) HTTP Server","text":"<p>The HTTP layer is framework\u2011agnostic thanks to a Router Port. The default implementation uses chi.</p> <pre><code>internal/platform/server/http/\n  ports/                  # Router interface (framework\u2011agnostic)\n  router/chi/             # chi adapter implementing the port\n  generic/                # health, error/404/405 handlers\n  middleware/\n    requestid/            # ensures X-Request-ID\n    recovery/             # catches panics, returns uniform 500\n  composer.go             # wires routes, middlewares, defaults\n  server.go               # *http.Server startup/shutdown\n</code></pre>"},{"location":"platform/#41-router-port-contract","title":"4.1 Router Port (contract)","text":"<pre><code>type Middleware func(http.Handler) http.Handler\n\ntype Router interface {\n  Use(mw ...Middleware)\n  Group(prefix string, fn func(Router))\n  GroupWith(mw Middleware, fn func(Router))\n  Mount(prefix string, h http.Handler)\n  GET/POST/PUT/DELETE(path string, h http.Handler)\n  SetNotFound(h http.Handler)\n  SetMethodNotAllowed(h http.Handler)\n  SetError(func(http.ResponseWriter, *http.Request, error))\n  ServeHTTP(http.ResponseWriter, *http.Request)\n}\n</code></pre>"},{"location":"platform/#42-composition-excerpt","title":"4.2 Composition (excerpt)","text":"<pre><code>r := chiadapter.New()\n\n// Global middlewares (order matters)\nr.Use(recovery.New(genericHandler)) // outermost guard\nr.Use(requestid.New())              // ensure X-Request-ID\n\n// Platform defaults\nr.SetNotFound(http.HandlerFunc(genericHandler.NotFoundHandler))\nr.SetMethodNotAllowed(http.HandlerFunc(genericHandler.MethodNotAllowedHandler))\nr.SetError(genericHandler.ErrorHandler)\n\n// Context routes (examples)\nuserhandler.RegisterHTTP(r, userH)\nuserhandler.RegisterHTTPProtected(r, userH, authMiddleware)\n\n// GraphQL\nr.Mount(cfg.ServerGraphql.Path, graphqlHTTPHandler)\n</code></pre> <p>Warning</p> <p>Middleware order matters: keep recovery first so it can catch panics from everything else. <code>requestid</code> should run early to propagate the same ID through logs and traces.</p>"},{"location":"platform/#43-generic-endpoints","title":"4.3 Generic endpoints","text":"<ul> <li><code>GET /health</code> \u2014 returns service metadata.</li> <li>404/405 \u2014 standardized JSON bodies.</li> <li>Error/Recovery \u2014 uniform 500 via centralized error handler.</li> </ul>"},{"location":"platform/#44-error-response-shape","title":"4.4 Error &amp; response shape","text":"<p>Adapters use <code>internal/shared/httpresponse</code> + <code>sharederrors</code> to produce a consistent envelope and status mapping:</p> Domain error HTTP status validation 400 unauthorized 401 forbidden 403 not_found 404 conflict 409 rate_limited 429 internal (default) 500"},{"location":"platform/#5-graphql-server","title":"5) GraphQL Server","text":"<p>GraphQL lives alongside HTTP and is mounted under <code>GRAPHQL_PATH</code> (default <code>/graphql</code>). Schema is modular per context.</p> <p>Flow:</p> <ol> <li>Drop <code>*.graphqls</code> files under each context (<code>internal/&lt;ctx&gt;/adapter/primary/graphql/schema</code>).</li> <li>Run <code>make graphql</code> to copy modules into the platform graph package and execute gqlgen.</li> <li>Resolvers delegate to context handlers, which call usecases.</li> </ol> <pre><code>internal/platform/server/graph/schema/_modules/   # assembled by make graphql\n</code></pre> <p>Tip</p> <p>Keep business rules in usecases; GraphQL handlers are thin mappers with tracing.</p>"},{"location":"platform/#6-observability","title":"6) Observability","text":"<p>AionApi is tracing\u2011first. Traces and metrics are exported via OTLP/HTTP to an OpenTelemetry Collector.</p>"},{"location":"platform/#61-tracing","title":"6.1 Tracing","text":"<ul> <li> <p>Tracer names by layer, e.g.:</p> <ul> <li><code>aionapi.user.handler.http</code></li> <li><code>aionapi.user.usecase</code></li> <li><code>aionapi.user.repository</code></li> <li><code>aionapi.graphql.handler</code></li> <li>Each operation starts a span and sets canonical attributes (operation, ids, status). Errors call <code>span.RecordError(err)</code> and set error status.</li> </ul> </li> </ul>"},{"location":"platform/#62-metrics","title":"6.2 Metrics","text":"<ul> <li>Prometheus scraping configured in <code>infrastructure/observability/prometheus/prometheus.yml</code>.</li> <li>Grafana provisioning + example dashboard under <code>infrastructure/observability/grafana/</code>.</li> </ul>"},{"location":"platform/#63-collector-config-dev","title":"6.3 Collector config (dev)","text":"<ul> <li>Default endpoint: <code>OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318</code></li> <li>Optional headers via CSV: <code>OTEL_EXPORTER_OTLP_HEADERS=\"x-api-key=dev\"</code></li> <li>Set <code>OTEL_INSECURE=true</code> for plain HTTP in local setups.</li> </ul> <p>Note</p> <p>Logs are structured (Zap). Fluent Bit + Loki are optional and can be added later for log aggregation.</p>"},{"location":"platform/#7-docker-environments","title":"7) Docker &amp; environments","text":"<p>Docker Compose files live in <code>infrastructure/docker/</code> (dev and prod\u2011like). Use the <code>Makefile</code> targets for convenience.</p> <p>Common targets:</p> <pre><code>make dev-up      # start dev stack (API + DB + dependencies)\nmake dev-down    # stop &amp; remove dev stack\nmake dev         # build image + dev-up\nmake prod        # build and run prod-like stack (where applicable)\n</code></pre> <p>Environment files are kept under <code>infrastructure/docker/environments/</code>. Review and align them with the Config variables above.</p>"},{"location":"platform/#8-security-httpauth","title":"8) Security (HTTP/Auth)","text":"<ul> <li><code>Authorization: Bearer &lt;token&gt;</code> is validated by the auth middleware (primary adapter). On success, it injects <code>user_id</code> into <code>context</code> for downstream handlers.</li> <li>Cookie helpers (<code>internal/shared/httputils</code>) centralize secure cookie settings when a browser flow is used.</li> <li>Never log secrets: passwords, raw tokens, or cookie contents.</li> </ul>"},{"location":"platform/#9-adding-a-new-context-platform-checklist","title":"9) Adding a new context (platform checklist)","text":"<ol> <li>Ports &amp; Usecase: define input/output ports and implement usecase under <code>internal/&lt;ctx&gt;/core</code>.</li> <li> <p>Adapters:</p> <ul> <li>Primary: HTTP and/or GraphQL handler + DTO/schema</li> <li>Secondary: repository (DB), cache, external clients</li> <li>Bootstrap: wire repositories + services in <code>internal/platform/bootstrap</code>.</li> <li>HTTP composer: mount routes via <code>RegisterHTTP(...)</code> and protected routes via <code>RegisterHTTPProtected(...)</code>.</li> <li>GraphQL: add <code>schema/&lt;ctx&gt;.graphqls</code>, run <code>make graphql</code>.</li> <li>Docs: add <code>docs/&lt;ctx&gt;.md</code> and update <code>mkdocs.yml</code> navigation.</li> </ul> </li> </ol>"},{"location":"platform/#10-troubleshooting","title":"10) Troubleshooting","text":"<p>No traces/metrics show up</p> <ul> <li>Check <code>OTEL_EXPORTER_OTLP_ENDPOINT</code> and that the Collector is listening on <code>/v1/traces</code> <code>/v1/metrics</code> over HTTP.</li> <li>If using custom headers, confirm <code>OTEL_EXPORTER_OTLP_HEADERS</code> CSV is valid.</li> </ul> <p>Chi routes return 404</p> <ul> <li>Ensure the global HTTP context prefix is correct (<code>SERVER_HTTP_CONTEXT</code>, e.g., <code>/aion-api</code>). All routes are mounted beneath it.</li> </ul> <p>JWT accepted but user not authorized</p> <ul> <li>Verify the auth middleware is applied to the subtree via <code>GroupWith(middleware.Auth, ...)</code>.</li> <li>Confirm token cache (AuthStore) contains the same reference stored at login.</li> </ul> <p>Migrations don\u2019t run</p> <ul> <li>Export <code>MIGRATION_DB</code> DSN and <code>MIGRATION_PATH</code> environment variables used by the <code>make migrate-*</code> targets.</li> </ul> <p>GraphQL schema changes not reflected</p> <ul> <li>Run <code>make graphql</code> and then <code>go mod tidy</code>. Rebuild the service.</li> </ul>"},{"location":"platform/#11-further-reading","title":"11) Further reading","text":"<ul> <li><code>docs/architecture.md</code> \u2014 big picture of Hexagonal + request flows</li> <li><code>docs/getting-started.md</code> \u2014 local setup, make targets, common commands</li> <li>Source readmes under <code>internal/platform/*</code> for deep dives into each package</li> </ul>"}]}